// "use strict"; // film023
const $ = document;
const body = $.body;
const SiteTitle = $.title;
const tlc = (PropartyValue) => PropartyValue.toLowerCase();

// جلسه 147

// film111: اما ما میتونیم هر عملکردی که هر پروژه ای که هر استارتاپی که میخایم با پارادایم تابعی یا همون فانکشنال بنویسیم همون رو میتونیم با بحث ابجکت ایرونسنتز پروگرمینگ یا همون پارادایم شی گرا هم  میتونیم بنویسیم یعنی در کل اجبار نیست که که ما بخایم او او پی کار بکنیم یا بحث فانکشنال هر دو اختیاری و طبق سلیقه و نیار اون پروژه برنامه نویسی میشه
// film111: پس ما که کلا با تابع و توابع کار میکردیم به اون سینتکس و به اون روش جلوبردن پروژه و توسعه و کدنویسی و توسعه یک برنامه و ایده یک پروژه به اون میگفتن پرادایم فانکشنال پروگرمینگ
// film111: توی حوضه برنامه نویسی کلمه ای وجود داره به اسم پارادایم که هرکدوم از همین هایی که گفتم بحث او او پی یا بحث تابعیی هر کدومشون یک پارادای به وجود میان که بهشون میگن پارادایم های برنامه نویسی
// film110: ما اگر بخوایم یکی از متدد های یک کلاس رو به طور گلوبال داشته باشیم و برای استفاده از اون متوده نیاز و اجبار و لزومی به ساخت یک اینسنس و نمونه داشته باشیم میام اون متدد رو به شکل استاتیک میسازیم  و تعریفش میکنیم
// film110: اگر من بخام به طور مستفیم بهش اکسعس داشته باشم و برای استفاده از این متدد حتما مچبور نباشم یک اینستنس از روی این کلاس بسازم ساخته باشم بسازم برای همچین چیزی میام قبلش یک کلمه کلیدی ربه اسم استاتیک قرار میدیم
// film108: بجز ساخت این سنز رشو دیگری فعلا نیستش که ما بتونیم به محتویات به کلاس دسنرسی داشته باشیم
// film107: داخل هر کلاس یک متدد دیفالتی هست به اسم کانسراکتور
// film107: بخث کلاس همون توابع سازنده هستند اما ن دیگه با تابع بلکه چیزی به اسم کلاس
// film090: ما امدیم به یک ای پی ایی که از سمت بکند کار گرفتیم یک ریکوعست ارسال کردیم از چه نوعی با چه متدد اچ تی تی پی با متدد پست و سپس تو بادی چه دیتایی رو ارسال کردیم به سمت سرور دیتای یوزر دیتا با چه فرمتی با فرمت جیسون و دیتا هایی ارسال کردم به سمت بکند دقیقا از همین پراپرتی هایی استفاده کردم برای نام گذااری و یا همون پراپرتی نیم ها استفاده مردم که خودشو بکند کار به من گفته بود و اگر دیتایی بغیزر از اینا استفاده کنم و بفرستم کلا کدم اشتباه عمل میکنه
// film090: نحوه استفاده از هر ای پی ای رو توسعه دهنده اون ای پی ای باید بگه حتی برای ای پی ای های پابلیک توی اینترنت وجود دارند برای همشون داکیومنت وجود دارد که توی داکیومنتشون نحوه استفاده از ای پی ای رو بهمون میگه که گفته با چ متدی به این ای پی ای ریکوعست  ارسال بکنی کچه دیتا هایی نیاز ه ریسپانس هر ای پی ای چیه و ...
// film089: دیفالت و پیش فرز متدد اچ تی تی پی توی کار با پج گت هستش نیازی نیست که مقدار دوم فچ رو متدد گت بزاریم اما اگر بخوایم تعیین کرده باشیم که چه نوع ریکوعستی میخایم ارسال کنیم اینجا میایم توی ورودی دوم برای فچ یک ابجکت ارسال میکنیم
// film089: اما اگر کد استاتوس ما 400 خورده ای 500 خورده ای باشه یعنی یک مشکلی توی سمت سرور برای ما وجود داره و ریکوعستمون دچار مشکل شده و اون ریسپانسیو ک میخاستیم برای ما ارسال نشده
// film089: توی هر ریسپانسیو که از سمت ای پی ای میاد برای ما توی خروجی یک استاتوس کد هم ارسال میشه که این ممکنه برای ما 200 باشه 100 باشه  212 باشه 214 باشه اما طبق همین استاتوس متوجه میشیم که برای ما این ریکوعست ما موفقیت امیرز بوده و اگر برای ما کد 200 یا دویستو خورده ای رو ارسال بشه به این معنیه که این ریکوعست ما درسته و مشکلی هم ارسال ریکوعس و دریات ریسپانس اصلا خواهد بود و کلاوجود ناره ali
// film089: ما اگر بخوایم از سمت کلاینت و از سمت فرانت اند به کمک جی اس یک ریکوعست به یک ای پی ایه سمت بکند ارسال بکنیم میایم از یک متددی به اسم فعچ استفاده میکنیم
// film088: پس من زمانی که میایم به کمک ای پی ای یک دیتایی از سمت سرور میگیرم میام اونو اول پارسش میکنم تا اینکه بتونم جی اسی بهش دسترسی داشته باشم یا اگر بخوام از سمت کلاینت به سمت سرورم دیتایی رو ارسال کرده باشم میام اونو اول جیسونش تبدیل میکنم و سپس دیتا های جیسونی خدم رو به سمت سرور ارسال میکنم و خب برنامه نویس سرور و برنامه نویس سمت بکند پروزه من هم دیا هی جیسونی رو ازم میگیره و سپس روشون ی پارسی انحام میده تا اینکه دیتای جیسونی که از منه فرانت اند گرفت به سینتکس زبان خودش در بیاد تا اینکه بتونه استفاده لازم رو ازش داشته باشه
// film088: دقت داشته باشید برای اینکه زبون ها نمیتوانند سینتکس همدیگرو بخونن به عنوان مثال ممکنه که ما یک متدی داشته توی جی اس باشیم که اونو توی زبان پایتون نداشته باشیم یا زبان پی اچ پی در کل سینتکس زبان ها متفاوت هستند اما پون که بکند و فرانت اند ممکنه که یک زبان مشخص و یکسان نباشن برای همین ارطبات بین فرانت اند و بکند بدون جیسون نمیشه  جون ما نمیتونیم که بیایم به زبان پی اچ پی سینتکس زبان جی اس رو بفهمونیم برای همین یک فرمت یونیکی میسازن به اسم جیسون که تمامی زبان ها همین جیسون رو بشناسن  و جیسون دات پارس هر زبان همون دیتا جیسونیه به سینتکس خود اون زبون تغییر میده
// flim088: ما میایم های خودمون رو زمانی که به سمت سسرور ارسال کنیم دیتا هامون رو قبلش دات استرینگی فای و با همین متدد تبدیلشون میکنیم به فایل های جیسونی و سپس ارسال میکنیم به سمت بکند با کمک ای پی ای و سپس بکند کار سمت سرور برنامه نویس بکند پروژمون میاد این دیتا هارو ازمون میگیره در قالب جیسون و واسه اینکه زبون خودش پ اچ پی باشه پایتون باشه =================برای انکه دیتا های جیسونی ما توی اون زبون قابل شناسایی باشه میاد دیتا های مارو به زبون خودش تبدیلشون میکنه  با کمک جیسون دات پارس
// film088: ضمنن یکی از تفاوت های و فرق هایه اساسی جیسون و ابجکت های عادی و دیفالت تو جی اس ما اینجا میتونیم بعد از اخرین پراپرتی مون هم کاما قرار بدیم اما توی ابجکت های جیسون مجاز به همچین کاری نیستیم من اگه بخام انتهای اخرین قسمت پراپرتی ابجکتم یک کاما قرار بدم برای من توی این قسمت ارور نشون خواهد داد حتی دنگشم قرمز میشه
// film088: ما داخل جیسون نمیتونیم تابع بسازیم و توی جیسون فقط فقط میشه از پرامیتیوی مثل استرینگ و نامبر و دیتا های رفرنسی بحث ارایه و ابجکت و الا اخر میشه استفاده کرد از دیتا های بولینی هم میشه استفاده کرد
// film088: جاوا اسکریپت ابجکت نوتیشن یعنی از ابجکت های جاوا اسکریپتی الهام گرفتن بحث جیسون رو و تنها فرقش با ابجکت های معمولی و دیفالت و عادی جی اسی اینکه ما توی ابجکت ها مجبور و موضف نیستیم که بیایم کی پراپتی هامون رو دابل کت یا سینگل کت قرار بدیم اما در جیسون فقط و فقط باید و حتما موضفیم یاماسم پراپرتی یا همون پراپرتی تاتل یا همون یا همون پراپرتی نیم ایتم ها ابجکتمون داخل دابل کوتیشن قرارشون بدیم
// film088: فرض کنیم یک وبسایت ساختم با اچ تی ام ال سی اس اس و همین جاوا اسکریپت و یک سایتی هم دارم که بکندش با زبان پی اچ پی هستش قطعها پی اچ پی نمیتونه ابجکته  یک ارایه جیسونی رو بشناسه برای همین میام براش  دیتا هایی که نیاز هستن رو به کمک ی پی ای با فرمت جیسون براش ارسال میکنم تا اینکه پی اچ پی بتونه دیتا هایی که من برش رسل کردم رو بتونه بگیره  و اون هارو بشناسه
// film088: ما از جیسون استفاده میکنیم تا اینکه بتونیم دیتا همون رو به طور فرمت بندی شده و اماده و با یک فرمت زبون هایی دیگه هم اونو میشناسن براشون ارسال کنیم
// film088: و یک نکته اخر ابکت اخر هم نباید کاما باشد
// film088: ما میتونیم به کمک جیسون دیتا هامون رو ذخیره سازیشون بکنیم و فرمت بندیشون بکنیم جیسون یک فرمتیه برای ذخیره سازی اطلاعات جیسون به وجود امده تا اینکه بحث کلاین وسرور بتونن با هم ارتباط بگیرن بدون هیچ دقدقه ای بدون هیچ گونه مشکل خطا و ارور خاصی
// film088: دقت داشته باشیم که من اگر العان بعد از اخرین پرارتی که نوشتم کامو قرار ندم به من ارور نشون میدهو باید حتما قرار بدیم یعنی اولی دومی سومی تا یکی مونه به اخری جا همشون کاما قرار بدیم بجز اخری
// film088: در جیسون موعضفیم کی ولیو رو کلیدرو حتما داخل دابل کوتیشن بزاریم سینگل کوتیشن هم قبول نیست تمام پراپرتی هارو داخل دابل کوتیشن قرار بدیم
// film088: جیسون یک فرمتیه برای ذخیره سازی اطلاعات ما از جیسون استفاده میکنیم یا همون جیسان هم بهشون میگن ما از جیسون استفاده میکنیم برای ذخیره سازی اطلاعات دوره ها کاربر ها اطلاعات مثلا محصولاتمون بحث مدرسین سایتمون ادمین های سایتمون فروشنده های سایتمون اطلاعاتشو همشو میتونیم در قالب جیسون تعریف کرده باشیم
// film088: جیسون مخفف JavaScript Object Notaion هست جاوا اسکریپت ابجکت نوتیشن پس از اسمش که مشخصه الهام گرفته از ابجکته های جاوا اسکریپت ما
// film088: به عنوان مثال میخایم از فرانت اند فرممون اطلاعات یوزر نیم پسورد و الا اخر رو بگیریم و با ای پی ای با متددی به اسم پست یا همون اچ تی تی پی متدد میخایم که به سمت سرور شون ارسال کرده باشیم برای همین میاد اون دیتا هامون رو اون به جیسون تبدیلشون میکنیم و سپس به سمت بکند با ایپی ای ارسالشون میکنیم  و این کاربرد جیسان هست
// film088: برای همین یک استانداردی ساخته شده به اسم جیسون که از همین ابجکت های جی اسی حالا الهام گرفته شده که میایم از همین جیسون استفاده میکنیم برای ردو بدل کردن و انتقال دیتا هامون بین ای پی ای و حالا بحث ای پی ای و بکند
// film088: چون ممکنه که فرانت اند من با همین جاوا اسکریپت باشه و خب بکندم ممکنه با نود جی اس باشه ممکنه با پی اچ پی باشه و خب ممکنه با پایتون باشه راست باشه و یا هرچی من اگه بخام دیتایی رو توی جی اس بسازم دیتا های جی اسی یا همین سینتکس جاوااسکریپتنیتوی زبان پی اچ پی شناخته نمیشوند زبان پایتون نمیتواند سینتکس جی اس رو داخل خودش جا بده و اونو جا بده
// film088: دیتا هایی که بین فرانت اند و بکند رد بدل میشن باید با جیسون باشه اما علتش چیه
// film087: یک ریکوعست به مسیر زیر ارسال میشه و سپس توی رسیپانسو توی پاسخ توی جواب از سمت بکند میگیری سورس کد صحفه ازش برای ما میاد و توی مین  خروجی رو بهمون نمایش میده
// film087: و گفتیم زمانی که میام توی ادرس بار مرورگر https://sabzlearn.ir/product/java-script-zero-tohero/  یک همچین ادرس و یک همچین ای پی ای مینویسیم و دکمه اینتر رو میزنیم مرورگر میاد برای ما یک ریکوعست از نوع گت به سمت سرور سبزلرن اینجا ارسال میکنه و توی ارتباط ریسپانس و توی پاسخی که ازش میگیره میاد سروس کد فایل ها و جزعیات همین صعفه رو ازش میگیره و توی مین مرورگر برای من کاربر نمایششون میده پس این میشه
// film087: ما میتونیم به کمک اچ تی تی پی متد هایی مثل متدد گت پوست پوت و دیلیت میتونیم بیایم به کمک اینها به کمک ای پی ایمون با سمت بکند ارتباط بگیریم و به کمک همین اچ تی تی پی متدد های تغییراتی سمت بکندمون اعمال کرده باشیم تغییراتی مثل تغییرات دیتابیس و توی دیتا های وبسایتمون
// film086: اما اگر بخایم یک اپدیت انجام بدیم چی ؟ میایم از یک متددی به اسم پوت استفاده میکنم
// film086: به تور مثال من میخام یک دوره از سایتم پاک بکنم میام یک ریکوعست اینجا ارسال میکنم به همچین ادرسی (اچ تی تی پی اس / ترید دابلیو سبزلرن دات ای ار / ای پی ای / ورژن اول / دوره ها / ای دی دوره ) با چه متدی متدی به اسم دیلیت مثلا به یک روتی یک ریکوعست و درخاستی ارسال میکنیم به اسم ث همین ادرس داخل پرانتز اسلش ایدی دوره ای که میخام حذف بشه
// film086: و نکته اینکه با چه ایپی ای با چه متددی و با چه دیتایی چه نوع ریکوعستی ارسال بشه اینو بکند کار باید بگه نه اینکه فرانت اند مار تصمیم گرفته باشه بکند کار توی پروژه های واقعی و توی شرکت های بکند کار ایپی ای رو توصعه میده و برای ما مینویسه و اون ای پی ایه رو همراه با دیتا عای ازمون میگیره و په نوع ریکوعهستی باشید باشه و ریسپانس هر ای پی ای چیه همشو به فران اند کار میده و و سپس برنامه نویس فرانت اند از ای پی ای های که از بکند کار گرفته توی پروژه استفاده میکنه
// film086: توی ای پی ای اچ تی تی پی متددی به اسم پوست همچین کاری انجام میشه یا همون ایجاد انجام میشه برامون پس من میام توی این حالت برای اینکه بخام یک دوره توی سایتم ایجاد کرده باشم میام یک ریکوعست از نوع پوست ارسال میکنم به ای پی ای خط پایینی
// film086: یا مثلا من میخام به کمک همین ای پی های به اسم همین قسمته سبزلرن دات ای ار / ای پی ای / نسخه یک / کورسز میخام که دوره ای رو توی سایتم ایجاد کرده باشم توی عملیات کراد این چی بود بود اسمی به نام سی کریت
// film086: خط پایینی یعنی من العان میام یک ریکوعست از نوع گت به همچین ای پی ای ارسال میکنم و ازش توی ریسپانسم کل اطلاعات دوره های به طور مثال سبزلرن رو دریافت میکنم
// film086: وقتی که ما میخایم اطلاعات رو از سمت بکند بگیریم این میشه عملیات رید کراد برای انحام عملیات رید از یک متدد اچ تی تی پی به اسم متدد گت استفاده میشه
// film085: مثل خط پایینی من میخام توی سبزلرنی که اینجا ایجاد کردم میخام از اطلاعات پروداکت های دیجیکالا مثل عکس محصولات مبلغ اینکه از چه فروشگاهی عرضه میشه اینکه ایا توی انبار موجودی دارن یا ن میخام از همه اینا توی سبزلرن خدم استفاده کرده باشم اما این اطلاعات توی سرور سایت من نیستن و دیجیکالا نمیاد برای منن کاربر این اعتماد رو بکنه که که کل سرور شو در اختیار من قرار بده برای همین برنامه نویس های بکند دیجیکالا میان برای من ای پی ای مینویسن که من ستونم با اون ای پی ای  ها به اطلاعات محصولات دیجیکالا دسترسی و اکسس داشته بتشم و از اون لحظه به بعد کمن میتونم به اطلعات جزعییات کلا مشخصاته پروداکت های دیجیکابل
// film085: ما میتونیم به کمک ای پی ای از اطلاعات یک سروری استفاده کرده باشیم سرور سبزلرن سرور دیجیکالا سرور اسنپ سرور هرجایی که دوست داشته باشیم در نظر بگیریم که من میخام توی  سایت سبزلرن فرز میخام که از اطلاعات جزعییات پروداکت ها و محصولات دیجیکالا استفاده کنم به عنوان مثال
// film085: یک مثال برای درک بهتر ای جکس من یک فرم ثبت نام توی وبسایتم دارم که میخام از این اینپوت های فرم ثبت نام خدم اطلاعاتی مثل یوزر نیم نیم و ایمیل بگیرم یک ابجکت براشون بسازم و ارسال بکنم به سمت بکندم تا بکند کار پروژه من دیتا رو از من فرانت اند کار بگیره حالا این ارتباط چجی انجام میشه این ارباط یک چیز یاقبلیتی به نام اسم ای پی ای ان یشه
// film085: ایجکس به نهوه ارتباط بین فرانت اند و بکند گفته میشه اما با یک شرط مهم توی این ارتباط گیری فرانت اند و سمت بکند سرور صعفه ما رفرش نشه
// film084: ممکنکه من بخام یک سی ام اس یا همون داشبود ادمین یا همون پنل مدیریت بخام بنویسم برای ادمین های سایتم قطعا توی سی ام اس ها یا همون داشبورد ها یا همون پنل های مدیریتی ادمین ها یا مدیر ها یک قسمت وجود داره به اسم مشاهده کاربر ها من میخام تو این قسمت لیست کل کاربر های خدم رو  همراه با اسم  بعدش یوزر نیم نام خانوادگی پسورد اینکه چه زمانی کاربر توی سایتمون ثبت نام کرده میخام همشو توی دام یا داشبورد ادمینم نمایششون بدم برای همین میام یک ریکوعست به سمت سرور ارسال میکنم میام اطلاعات کل یوزر هامو از بکند کار میگیرم اما چجوری با کمک چیزی به نام ای پی ای و سپس بعد از اینکه تمام دیتا های یوزر هامو از سمت بکند  و دیتا بیس گرفتم میام توی سی ام اس یا پنل مدیرریت مدیر ها وبسایتم نمایش میدم توی فرانتم نمایش میدم
// film084: نهوه ارتباط فرانت اند با بکند اینجوری که میام یک ریکوعست بع سمت بکندم ارسال میکنم و توی ریکوعستم توی درخاستم بهش میگم که من ازش چی میخام و بکند کارم تبغ همون ریکوست و همون درخاست من دیتا رو درقالب ریسپانسو برای من برمیگردونه
// film084: ما اگر به تور مثال دو قسمت سرچ گوگل بنویسم به تو مثال سبزلرن دات ای ار این مرورگر من یک ریکوعس به سمت سرور سبزلرن برای ما ارسال میکنه و به عنوان ریسپانسو اطلاعات صعفه اصلی برای من میگیره و برای من اجراشون میکنه وبهم نشون میده
// film084: https://www.sabzlearn.ir/api/v1/courses |= ای پی ای همین لینک ها هستن مثل روبه رو
// film083: ای جکس یعنی اینکه من بیام از سمت فرانت اند با سمت بکند ارتباط ایجاد کنم بیام به عنوان فرانت اند کار با سمت بکند و سمت سرور وبسایتم ارتباط بگیرم اما صحفه ای من رفرش نشه و بیام از سمت مرورگر خدم بیام با سمت بکند ارتباط بگیرم بیام به سمت بکند به بکند کار پروژم اطلاعات ارسال بکنم یا بیام از بکندم اطلاعات رو بگیرم اما صحفه رفرش نشه به این میگن ایجکث
// film081: ما امدیم یک تابع ساختیم  (در فیلم و سورس کد پروژه) که برای من یک پرامیس ریترن میکنه و دقیقا برای همین موضوع واسه اینکه برای من اجرا بشه نیازمند دن هستم توی ریزالو تابم یک ابجکتی رو توی ریزالو اجرا کردم و ایمجا گفتیم که خروجی هرکدوم از اینا پارس داده میشه به ورودی تابع کالبک ریزالو بعدی ما پس العان تو ریزالو تابع اولمون خروجیش پارس داده میشه به همون پارس دیتا و توی فانکشن تابع بعدی ما توی ریزالوش پارس داده میشه به همین پارس دیتا واینم میاد پارس داده میشه به به فانکشن بعدی توی بحث ریسپانسو کالبک بعدی مافول فیلد بعدی ما ریزالو بعدی ما
// film081: وقتی که ما از تو پرامیسمون به قولی که دادم عمل بکنم میام پرامیسمو ریزالو و فول فیچ میکنم و سپس برای ریزالو یک ابجکت برای ورودی ارسال میکنم
// film080: اگه از دن چینینگ هندلر زمانی برای ما فراخانی میشن که پرامیس ما ریزال شده باشه ن ریجکت
// film080: و دوباره خط پایینی رو تکرار میکنم من اومدم از هندلر دن پشت سر هم و متوالی و زنجیره ای وار یا همون چینینگ ازشون استفاده کردم به این میگن چینیگ هندلر زمانی که ریترن برگشت داده میشه همین دیتایی که ریترن میشه میره به عنوان ورودی میشینه به جای  دن دوم
// film080: در دن ها و کتچ زمانی که میخایم یک دیتاییرو داخلشون ریترن بکنیم اون دیتایی که داخل مثلا دن ریترن میشه میره توی دن دوم به عنوان ورودی برای ما در دسترس قرار میگیرع واسمون
// film080: دیتایی که از ک عملکرد ایسینک برای ما میاد عمدتا از ای پی ای ها بهشون میگن ریسپانسو( ای پی ای هنوز یاد نداری)م
// film080: اگه داخل دن ریترن وجود داشته باشه کجا میره ؟ یک دن دیگه پایین میسازیم و ریترن دن اول میره تو دن دوم.then(() => return console.log("Success :))")).then(() => return console.log("Success :))")).then(() => return console.log("Success :))"))
// film079: .finlly = دقیقا مقل دو وایل کاری نداره کتچ اجرا میشه یا دن بعد از اجرای یک کدوم از اینا فاینلی انجام میشه
// film078: .catch  = ورودی داخل ریجکت میره داخل ورودی کتچ
// film078: .then   = ورودی داخل ریزالو میره داخل ورودی دن
// film078: Pending - Fulfilled(Resolve) - Rejected = هر پرامیس یا فول فیلد هست یا ریجکت یا پندینگ پندینگ که همون درحال برسی هست که دیتا ریزالو هست یا ریجکت
// film077: هر پرامیس میتونه یا ریجکت بشه یا ریزالو واین دوتا مثل ریترن میمونن وقتی کد بهشون برسن دیگه به خط های بعدی کاری نداره و همزکان نمیتوانیم از هر دوش استفاده کنیم
// film076: reject  = ریجکت برای علامت گذاری شکست عملیات اراعه و برای دلیل خطا به کار میرود
// film076: resolve = برای علامت گذاری موفقیت امیز بودن عملیات استفاده میشود در حالی که
// film075: Promise یک ابجکت هست که نمایانگر نتیجه یک عملیات غیرهمزمان است و میتواند در اینده به یکی از دو حالت موفق یا ناموفق (resolve, reject) تبذیل شود
// film075: وقتی ما مقدار زیادی فانکشن تودر تو داشته باشیم و در اون فانکشن کالبک های زیادی تعریف کرده باشیم به اون کالبک ها میگن جهنم فانکشن یا callback hell
// film074: reverse() = ارایه مارو از اخر به اول میکنه
// film074: تمامی متدد هایی که میخایم روی ارایه استفاده کنیم و دیتای خام و اصلی ارایه مارو تغییر بدیم به اینا میگیم میوتیبل اری متد مثل پوپ و پوش اما بعضی از اینا مثل فیلتر و مپ و اوری و فایند و فایند ایندکس که اینا نمیان ارایه اصلی مارو میوتیتشون بکنن و میان برای ما یک ارایه دیگه خودشون برای ما برمیگردونن
// film074: زمانی که ما از دیتای رفرنسی استفاده میکنیم و انها رو میخایم کپی بگیریم در اصل کپی نمیشن برای ما و میان یک پویتر و اشاره گر به همون خونه از حافظه ما میکنن که هون وریبل که ازش کپی کردیم مقدار دهی کردیم
// film074: تمامی دیتا تایپ های پریمیتی ها همشون امهیوتیبل هستن یعنی ما کلا نمیتونیم بیایم ولیو دیتای های پریمیتیو خودمون رو تغییرشون بدیم فقط میتونیم مقدار دهی مجددشون کنیم
// film074: Mutibility = به دیتای های قابلیت تغییر رو دارن بهشون میگن میتیبیلییوتی و ImMutibility = قالبیت تغییر داده نشدن
// film073: اگر بخایم یک خط از کدمون رو با براکت یا اکولاد شروع کنیم موظفیم اخر خط بالایی رو با سیمیکالن تموم کنیم وگرنه ارور خواهد داد و همچنین با پرانتز ببخوایم شروع کنیم مثل توابع خود خان باز هم باید خط بالایی با سیمیکالن تموم کرده باشیم
// film072: ما متوانیم در شرط های تک خطی از ایف الس هم استفاده کنیم با گذاشتن دو نقطه در پایان ایف
// film071: زمانی که با مقادیر ابجکت رو از بیرون ابجکت میخایم مقدار دهی کنیم دیگه نمیخاد بنویسیم اسم پراپرتی دقیقا همون اسم ولیو username: username, اگر ما همون یوزر نیم رو بنویسیم کفایت میکنه و باز هم کدمون کار میکنه
// film070: Symbol.for(18) = برای اینکه بتونیم سینبل رو اشتراکی کنیم از متدد فور استفاده میکنیم
// film069: Symbol = سیمبل به مقدار یونیک و منحصر به فرد مثل ایدی و توی همین پروژه مون بهمون میده یعنی داهل پرانتز که پشت پرده است ما بهش به طور مستقیم دسترسی تداریم
// film066: proxy = پروکسی ها به ما این امکان رو میدهند که وقتی بخایم رو ابجت پرارتی ولیو ست کنیم به چیر هایکه ست میشه درسترسی داشته باشیم مثلا مقدار سن حتما نامبر و بزرگ تر از صفر و کوچیک تر از 120 باشد
// film065: وقتی که ما میام یک ابجکتی رو با ست اضافه میکنیم وقتی که بخوایم بعدا اون ابجکت رو جذف کنیم از حافظه کاربر حذف نمیشه یعنی به طور کامل حذف نمیشود ولی اگه با ویکست ابجکت رو ذخیره کنیم بعد از دیلیت دیگر خبری از اون ابجکت دیگر نیست
// film064: مپ میاد برای ما یجورایی مشکلات که توی ارایه ها رو داشتیم رو برطرف میکنه
// film063: مپ هم یجورایی یک دیتای ساختار یافته برای ابجکت ها هست
// film064: let userObj = Object.fromEntries(userMap2) ||= برای تبدیل یک مپ  یوزر مپ دو به یک ابجکت معمولی از این سین تکست استفاده میکنیم
// film064: نکته در مورد مپ در مپ ابکت ترتیب بندی دستی داره ن بر اساس حروف الفبای اینگلیسی نکته دوم اینکه ابجکتا لنس ندارن و سایز جای اون رو پر کردن
// film064: let userMap = new Map(); سینتکس نوشتاری مپ به این شکله
// film063: console.log(setItemData.has({id: 1, name: "MohammadNiko"})); اگر ما بخوایم ببینم ابجکت با ای دی یک داخل ست ایتم دیتا هست یا ن اگر دقیقا هم همین ابجکت رو داشته باشیم برای ما فالس برمیگردونه ||console.log(setItemData.has(itemOne)); این روش درست این است که یک ابجکت  با اسم مثلا ایتم یک که درست کردیم و به ست ایتم دیتا اضافه کردیم اینجا بیایم ببینم شامل میشه یا نه
// film063: نکته درمورد ست فقط فور ایچ میتوان استفاده کرد برای ست
// film060: newSetArray.size            ||= سایز دقیقا همان لنس هستکه نشان میدهد چه تعداد محتوا داخلش هست
// film060: newSetArray.has(12)         ||= از ست نیو ست اری برو ببین دوازده داخلش هست یا ن
// film060: newSetArray.clear()         ||= کل دیتا های ست نیو ست اری رو حذف کن
// film060: newSetArray.remove(22)      ||= از ست نیو ست اری 22 رو حذف کن
// film060: newSetArray.add(22)         ||= به ست نیو ست اری 22 رو اضافه کن
// film060: let newSetArray = new Set() ||= برای نوشتن یک ست جدید به همچین سینتکسی نیاز هست
// film060: map = دقیقا شبیه ابجکت ها هستن با این تفاوت که میتونیم به سایز و لنسش هم دترسی داشته باشیم
// film060: set = خیلی مشابه ارایه ها هستش با این تفاوت که مشکل تکراری بودن اتیم ها دیگه وجود نداره یک نوع داده جدیده و میشه ازش تو برخی جاها بجای ارایه ها استفاده کرد ک یکی از قابلیت هاش میتوانیم ایتم های تکراری رو به ثورت اتوماتیک اضافه نکنیم
// film059: Object.entries(users); || Entries ||= در دیتا بیس سمت بکند برای ما یوزر هامون رو شکل یک ابجکتی یک با مقادیر یک و دو و سه و ... و جلوش ابجکت یوزر ما هست واگر ما بخوایم به تور مثال یک کاربر رو پیدا کنیم ولی با قابلیت اتریبل ما میتوانیم ابجت اصلی یوزر هارو به ارایه تبدیل کنیم
// film058: user.address?.street || opthinal chaining  ||= اپشنال چینینگ ی قابلیت هست که میشه اگر یوزر ادرس استریت وجود نداشت بیا مقدار دیفالتشو برابر با اندیفایت بزار
// film057: resValue = portNan ?? 1385 ||= اگر مقدار پورتنن یک تورو ولیو بود با هزار سیسد هشتاد پنج رو بریز در ریز ولیو نکته اگر به مقادیر نال و اندیفایند هم برسه بازم رد میشه
// film057: let developingPortValue = portNan || 1385 ||= اگر مقدار پورتنن یک فالس ولیو بود با هزار سیسد هشتاد پنج رو بریز در دیویلیوپینگ
// film057: Built-in Cons Funcs = بیلت این یعنی توابع سازنده ای که از قبل توی جی اس وجود دارن توابع زانده ای که داخل خود خو.د جی اسن
// film056: نمشه در ارو فانکشن ها به شکل و با هدفه برای توابع سازنده نوشت
// film055: this.name = "reza" ||= برای تعیین پروپرتی های توابع سازنده از کلمه کلیدی دیس استفاده میکنیم
// film054: تفوات فانکشن معمولی و ارو فانکشن در ست تایم اوت اگر بخوایم از کلمه کلیدی دیس استفده کنیم به ویندو اشاره میکنه در فانکشن معمولی ولی اگر ارو فانکشن باشه به ابجکت اشارهمیکنه در فدر پروژه فیلم
// film053: showUser.bind(user1 , 20 , 'russia')() = بایند خیلی مهمه و مثل توابع هایر اوردر هست
// film053: showUser.apply(user1 , [20 , 'russia']) = دیس اینجا به ابجکت یوزر یک اشاره میکنه و بیست و روسیه به ورودی های فانکشن و اپلای فرقی که کال و در ورودی های دوم به بعد یک ارایه میگیره
// film053: showUser.call(user1 , 20 , 'russia') = دیس اینجا به ابجکت یوزر یک اشاره میکنه و بیست و روسیه به ورودی های فانکشن
// film052: RegEX = سرچ کردن در استرینگ ها مشکلاتی دارد که یک کتاب خونه هست که مشکلاتی رو رفع کرده در این زمینه دات معنی یک حرف رو داره و مثبت به معنای مابقی
// film050: this کلمه کلیدی دیس در هر جا معنی و ولیو متفاوتی داره به طور مثال اگر در تگ ال ای در اچ تی ام ال اگر یک انکیلک و فانکشن داخل ورودی فانکشن کلمه دیس رو بزاریم در خروجی همون تگ رو به ما ریترن میکنه و در ابجکت ها اشاره میکنه به خود مین ابجکت و اگر در ابجکت به تور مثال بگییم دیس دات ایج برای سن داخل مین ابجکن رو ریترن میکنه ولی اگر فانکشن داخلش از دیس استفاده کنیم ویندور رو لاگ میگیره
// film049: indexdb = یک دیتا بیس هست در اپلیکیشن که ارایه و ابجکت های مارو به صورت کی ولیو ذخیره میکنه
// film046: event.target.result.deleteObjectStore(`users`) => از شبه ارایه که به ما دادهدر ریزالت اگر داخل ابجکت استور یوزر وجود داشت حذفش کن
// film046: event.target.result.objectStoreNames.contains(`users`) => از شبه ارایه که به ما دادهدر ریزالت ایونت داخل ابجکت استور نیم ها ببین شامل میشه ابجکت یوزر نیمی به اسم یوزر
// film046: event.target.result.createObjectStore(`users`) => از شبه ارایه که به ما دادهدر ریزالت ایونت یک ابجکت استور بسازه به نام یوزر
// film045: console.log("Old Vearsion: " , event.oldVersion); =  ورژن قدیمی اینجا لاگ گرفته میشه
// film045: console.log("New Vearsion: " , event.newVersion); =  ایندکس دی بی اوپن ورودی دوم ورژن رو دادیم اگه ورژن رو تغییر بدیم یک اپدیت انجام میشه و ورژن جدید اینجا لاگ گرفته میشه
// film045: console.log("Error: " , err); = ورودی ایونت ارور رو میگیریم و اگه ارور داد اینوت اجرا میشه و اینجا گفتیم ارور رو لاگ بگیر
// film845: indexedDB.open("Leach mob" , 10) = ایندس دی بی بخشی است برای ذخیرع اطلاعات بکند ورودی اول اسم ارایه هست مثل پروداکتز
// film045: addEventListener("error" => وقتی ایندکس دی بی ارور داد این ایونت انجام شد
// film045: addEventListener("success" => وقتی ایندکس دی بی ثبت شد این ایونت انجام شد
// film045: addEventListener("upgradeneeded" => وقتی ایندکس دی بی اپدیت شد این ایونت انجام شد
// film044: Delete = حذف کاربر
// film044: Update = تغییر اطلاعات کاربران
// film044: Read(get) = گرفتن اطلاعات از بخش دیتا بیس
// film044: Create ساختن اطلاعات که دریافت میشه مثل اطلاعات ثبت نام
// film044: C.R.U.D. = Create + Read(get) + Update + Delete = در بکند استفاده میشه
// film041: import * as Functoins بعد از اینکه اکسپورت گرفتیم از تابع یا دستورات میتوانیم در فایل اصلی اینپورت تمام فایل هایی که اکپورت شده رو بگیریم
// film041: import defult اگر بخوایم فقط یک تابع یا دستوری را دریافت بکنیم از فایل فرعی از دستور اکسپورت دیفالت استفاده میکنیم نکته اسامی میتوانند هر چیزی باشند چون یک دانه هست فقط و مثل اری فانکشن نمیخاد در کرلیبریس بنویسیم
// film041: export defult اگر بخوایم فقط یک تابع یا دستوری را بفرستیم به فایل اصلی از دستور اکسپورت دیفالت استفاده میکنیم
// film040: as اگه خاستیم اسم تابع یا دستور را عوض کنیم باید اسم اصلی تابع رو بنویسیم بعد اسم اسم دلخواه رو بنوسیم
// film040: import ایکسپورت به ما این امکان را میدهد که در فایل جاوا اسکریپت اصلی تابع و دستورات را اینپورت بگیریم از فایل فرعی جاوا اسکریپت نکته حتما باید اسامی تابع و دستورات را مشابه هم بنویسیم
// film040: export ایکسپورت به ما این امکان را میدهد که در فایل جاوا اسکریپت جدا تابع و دستورات را ایکسپورت بگیریم به فایل های اصلی جاوا اسکریپت
// film040: ماژول ها به ما این امکان را میدهد که در فایل اصلی جاوااسکریپت از دستورات و تابع های یک فایل جاوا اسکریپت جدا  استفاده کنیم
// film038: میتوانیم اند و اور رو به صورا تک خطی و فقط با نوشتن اند و اور بنویسیم
// film037: 5_000_000 || = برای سریع خاندن نامبر ها از سمت راست هر سهتا صفر یک سیمیکالن میاریم و در محاسبات مشکلی پیش نمیاد ولی نمیشود از ورودی اینپوت اچ تی ام ال به این روش بگیریم اگه بگیریم خروجی اندیفاین میشود
// film036: num.padEnd(2 , "0") || = پدینگ استارت میگه اگر مقدار نام بیشتر کمتر از دوتا بود بیاد اخرش از مقدار نام یک صفر اضافه کن
// film036: num.padStart(2 , "0") || = پدینگ استارت میگه اگر مقدار نام بیشتر کمتر از دوتا بود بیاد قبل از مقدار نام یک صفر اضافه کن
// film035: ما یک حلقه دیگه هم داریم به نام فوراین که سینتکسش دقیقا مثل مثال خط 33 هست و برای ابجکت ها استفاده کیشه
// film034: برای جمع کردن یا کانکت به `` از دالر بلاکز استفاده میکنیم
// film033: ما یک حلقه داریم که سیتکسش دقیقا شبیه حلقه فور است فقط فرقش در پرانتز اولشه یک ایتم تعریف میکنیم و تک تک ایتم های ارایه رو میگیریم
// film032: دابل کوتیشن مشکلاتی رو داره مثل کانکت اینتر زدن محاسبات و غیره و برای رفع این مشکل  از `` استفاده میکنیم و هیچ کدوم از مشکلات زکر شده رو نداره
// film031: اگر خاستیم مقادریر یک ارایه رو داشته باشیم باید یک ارایه تعریف کنیم و نام های متغیر رو داخلش بنویسیم که شبیه کی ولیو در بیاد
// film030: اگه ما فانکشنی داشتیم که تعداد ورودی هایش نا معلوم بود باید در پرانتز ورودی فانکشن بنویسیم به طور مثال سه نقطه اسم ارایه که ورودی های نا معلوم میاد بشینه بجای این ارایه
// film029: Array.from(arguments) = بیا ارگیومنت که یک شبه ارایه هست رو بیا به یک ارایه وقعی تبدیل بکن
// film029: شبه ارایه یعنی فقط شبیه ارایه هستن
// film029: ارگیومنت به تمام ورودی های تابع ما ارسال میشه دسترسی داره حتی اگه بیشتر از مقدار دهی که ما دادیم باشه که محدوده و داخل ارو فانکشن اندیفاین خطا میدهد
// film027: ...numbers = برای ما تک تک مقادیر داخل ارایه رو ریترن میکنه esparat
// film025: ارو فاکنشن به ما این امکان رو میده که که کد های یک خطی داخل فانکشن رو به صورت خلاصه بنویسیم
// film024: اگر بخوایم یوز استریک در یک جای خاصی استفاده کنیم به طور مثال در یک فانکشن خط اول فانکشن مینویسم باز هم کار خواهد کرد و اگر
// film024: نکته حتما باید یوز استریک رو اولین خط نوشته باشیم تا کار کند
// film023: "use strict"; = یوز استریک برای ما رفتار سخت برخورد میکنه با کد های ما یعنی مثال های جلسه 23
// film022: انواع متدد هایی که روی ارایه ها خیره میشوند به طور مثال فالتر مپ اینکلوس اینا هم یک تابع تایر اوردر به حساب میاد
// film022: برای خروجی گرفتن از اچ او سی باید دوتا پرانتز بزاریم یا میتونیم داخل یک ویربل ذخیرش کنیم بعد نشون بدیم
// film022: تابعی که یک تابع دیکه رو توی ورودی دریافت کنه یا تابعی رو برای ما ریترن بکنه خود اون تابع میشه هایر اوردر
// film022: به تابعی که در اسکوپ و محدوده و ناهیه گلوبال یا همان ناحیه صراصری فایل جی اسی ما تعریف میشن توی کل کل سرس کد مون قابل دسترسی و استفاده هستند
// film022: به ناهیه اصلی صحفه جاوا اسکریپت میگن گلوبال یا سراسری
// film022: به بین محدوده اکولاد باز و بسته میگن بلاک
// film022: ما در جاوااسکریپت دوتا اسکوپ داریم اسکوپ گلوبال یا سراسری و یک اسکوپ لوکال اسکوپ
// film021: scope یعنی محدوده و معنی و کانسبت اسکوپ برای ما توی زبان جی اس تعیین میکنه که یک وریبل که ما ساختیم توی چ محدوده ای توی کدوم قسمت ها  از سرس کد ما قابل دسترس و قابل استفاده است
// film020: به روشی که میایم توابعمون رو تو در تو و توهم توهم استفادشون میکنیم به همچین روشی میگن کمپزیشن فانکشن
// film019: توابع پیور برای ما اینکه یک خروجی برگردونه فقط مجازن که فقط از ورودی ها اتفاده کنند واز وریبل  های داخل محدوده فانکشن  یعنی تو داخل فانکشن
// film019: خط پایینی پایینی بالاتری رو داند و میشود خروجی هارو حدس بزنیم
// film019: اگه تابعی یا اگر بخوایم به تابعی پیور بگیم حتما باید سه تا ازمون شرط رو بگیره شرط اول باید ساید افکت ایجاد نکنیم وبا ورودی خودش ورودی  ک ن مقادیر و متغیر های سیستم خارج از خ.دش کاریش نباشه توی خروجی خودش از مث رندوم و چیزایی مثل نیو دیت که مدام در حال اغییر هستند استفاده نشه به اعضای هر ورودی هایی که بهش ارسال میشه یک خروجی ثابت و یکسان بهمون بده اگر تابعی این سه شرطرو داشته باشه بهش میگن تابع خالط  پیور فانکن
// film019: اگه دوتا ای و بی رو توی ورودی خودش بگیره و اون هارو برای ما فقط جمع کنه و بهمون ریترنش بکنه این میشه تابع پیور اما اگر تو این خروجیش از مس رندوم استفاده شده چون خروجی به اعضای هر ورودی ثابت نیست و متفاوت برای ما خروجی میده نمیشه این یک تابع  پیور بهش میگن این پیور
// film019: یک شرط برای اینکه ابع پیور به حساب بیاد اینکه اون تابع اثر جانبی نداشته باشه تابع پیور نمیتواند تابع مقادیر خارج از خوددش رو هم تغییرشون بده
// FILM019: هر تابعی که به اعصضای ورودی ایکس برای ما خروجی وای برمیگردونه یعنی به اعضای هر ورودی یک خروجی ثابت رو داره به همچین تابعی میگن تابع خالص تابع پیور فانکشن
// film016: به تابعی که به عنوان ورودی بدیم به یک تابع دیگه و تابعی که به عنوان ورودی ارسال یا دریافت بشه به اون تابع میگن کالبک
// film015: تابعی که به عنوان ورودی ارسال میشه به یک تابع دیگه به اون میگن کالبک فانکشن
// film013: event.target.tagname = "li" || اگر با ایونت دات تارگت خاسته باشیم یک المنت رو حذف کنیم وقتی المنت جدید باشه و از قبل در داکیومنت نباشه با روش غیر از روبه رو نمیشود المنت راحذف کرد و برای روشف این مشکل باید بنویسیم اگر ایونت تارگت تگ نیم ببرابر بود بود با مثلا ال ای بیا ایونت تارگت ریمو انجام بده
// film012: event.stopPropagation(); = ایونت استوپ پروگتیشن یک متدد هست که از بابلین و کپچر جلوگیری میکنه
// film011: , {capture: true} سینتکس کپشر دقیقا مثل انس هست و مقدار دیفالش فالس هست یعنی بابلینگ فعاله ولی اگر مقدار کپچر تورو باشه بابلینگ غیرفعال میشه و کپچر  فعالا میشه
// film010: .forEach(function(item , index) چونکه خروجی فور ایچ یک ابجکت هست از یک ارایه ما میتونیم اینکس اون ابجکت رو هم داشته باشیم
// film009: once: true = برای ایونت کلید ما میتونیم یک ابجکن به ادد ایونت لیسنر کلیک اضافه کنیم که مقدارشو بزاریم انس تورو یعنی فقط یک بار کلید بشه دفه دوم ایونت اجرا نمیشه
// film008: .startsWith() = استرات ویت همنجور که از معنیش میشه ایا با  فلان شروع میشه میتوانم بجای متدد اینکلدس که معنیش میشه ایا شامسل میشه
// film006: doucment.designMode = "on" (/"off") || دقیقا مثل متدد خط پایینی ما مشابهشو داریم داکیومنت دیزاین مد که به صورت دیفالت مقدارش افف هست
// film006: document.body.contentEditable = true || ما میتوانیم در کنسول همچین سینتکسی رو بنویسیم  و تمام المنت های داخل اچ تی ام ال رو تغییر بدیم به طور دیفالت نمیشه تغییر داد و مقدارش فالس هست
// film006: $_ = اگر ما یک عملایتی رو قبلا در کنسول انجام داده باشیم و اگر بخوایم از خروحی اون استفاده کنیم از دلار اندرلاین استفاده میکنیم
// film006: $0 = اون المنتی که ما در تب المنت ها انتخاب کردیم در کنسول نشان میدهد
// film006: $$(".list-item") === document.querySelectorAll(".list-item") = و برای انتخاب چند کلاس از دوعتا علامت دلار استفاده میکنیم در کنسول
// film006: $("divElam") === document.querySelector("#divElam") = ما همچنین میتوانیم از دلار اسم المنت بجای داکیومنت کوری سلکتور استفاده کنیم در کنسول
// film005: در صحفه اچ تی ام ال وقتی ما به یک المنت ای دی میدیم خودکار در هسته جاوا اسکریپت اون المنت سلکت میشه انگار ما اون المنت رو تعریف کردیم با گت المنت بای ای دی ولی اصلا پیشنهاد نمیشود در پروزه های واقعی از این روش استفاده کنیم

// جلسه 2


let myNewArray = [
  {id: 1, name: "mohammad" , score: 19},
  {id: 2, name: "reza" , score: 17},
  {id: 3, name: "amir" , score: 18},
  {id: 4, name: "amin" , score: 15},
  {id: 5, name: "saeed" , score: 16},
]

let maxScore = myNewArray.reduce((pre , curr) => {
console.log(pre.score, curr.score)

if (pre < curr.score) {
  return curr.score
} else {
  return pre.score
}
}, 0)

console.log(myNewArray)


// جلسه 1


let myArray = [
  ["mohammad" , "reza" , "amir"],
  ["ali" , "erfan" , "saeed"],
  ["mohsen" , "abolfazl" , "hamid"],
  ["amin" , "mahdi" , "sajad"]
 ]
 
 let resultMyArray = myArray.reduce((pre , curr) => {
  console.log(pre.concat(curr))
  console.log(...pre , ...curr)
  return [...pre, ...curr]
  return pre.concat(curr)
 })
 
 console.log(resultMyArray)


// حلسه 131


let openScroll = false;
let todoComplate = false;
let input = $.querySelector("input");
let continerTodo = $.querySelector("main");
let addTodo = $.querySelector(".addTodo");
let clearAll = $.querySelector(".clearAll");

addTodo.addEventListener("click", function() { 
  if (input.value.trim()){
     makeTodo() 
  }
   input.focus() 
  })
input.addEventListener("keyup", function (e) {
   if (e.keyCode === 13 && input.value.trim()) { 
    makeTodo() 
}});
clearAll.addEventListener("click", clearContiner)

body.addEventListener("keyup", function(e) {
  if (e.keyCode === 46){
   clearContiner() 
  }})

function makeTodo() {
    // <div class="main">
    //           <p class="todo__title" onclick="visibleScroll()">${input.value.trim()}</p>
    //           <div class="mianBTN btns">
    //               <button class="btn complateTodo" onclick="todoComplateHandler(event)">complate</button><button class="btn deleteTodo" onclick="todoDeleteHandler(event)">remove</button>
    //            </div>
    //       </div>
  input.value = "";
}

function clearContiner(){
  continerTodo.innerHTML = '';
  input.value = '';
}

function todoComplateHandler() {
  console.log(e.target);

  e.target.parentElement.parentElement.classlist.add("mainComplate");
}
function todoDeleteHandler(e) {
  console.log(e.target);

  if (e.parentElement.parentElement.tagName === "div"){
    e.target.removeElement()
  }
}

function visibleScroll(){
  console.log("object visibleScroll called with scroll")
}


// جلسه 128

// class Book {

//   constructor(id , title , author , anisur , allChapter){
//       this.id = id;
//       this.title = title;
//       this.author = author;
//       this.anisur = anisur;
//       this.allChapter = allChapter;
//   }

//   HowManyDayToFinishBook(){
//     console.log(`if you 3 chapter read in day book ${this.title} finised in ${(this.allChapter / 30).toFixed(0)} months and finished in ${this.allChapter % 30} day`);
//   }

// }

// let ghanon48 = new Book(1 , "48ghanon" , "rabert green" , 2002 , 285)

// console.log(ghanon48.HowManyDayToFinishBook());

// class todo extends Book {
//   constructor(id , title , isDoing){
//       super(id , title)
//       this.isDoing = isDoing
//   }

//   checkIsDoing(){
//     this.isDoing ? this.isDoing = "anjam shod" : this.isDoing = "anjam Nshod"
//     console.log(`this ${this.title} is ${this.isDoing}`);
//   }
// }

// let goToGYM = new todo(1 , "go to GYM" , false)

// console.log(goToGYM.checkIsDoing());

// جلسه 127

// class GameInfos{
//   constructor(gameName , gameCountName , antashar , sazande , sabk){
//     this.name = gameName
//     this.bakhshName = gameCountName
//     this.antashar = antashar
//     this.nasher = sazande
//     this.sabk = sabk

//     this.showGameInfo = function(){
//         console.log(`game name = ${this.name} and Game Count Name = ${this.bakhshName} and Antashar = ${this.antashar} and name company ${this.nasher} and Sabk Of Game ${this.sabk }`);
//     }
//     this.showGameInfo = function(){

//     }
//   }
// }

// let CODMW2 = new GameInfos("Call of Duty" , "Modern Warfare 2" , 2015 , "Activision" , "Shorter - Action")
// let GTASA = new GameInfos("Grand Theft Auto" , "San Andereas" , 2004 , "RockStar" , "Open World - Milf")
// let FC5 = new GameInfos("Far Cry" , "5" , 2018 , "Ubisoft" , "Action - Open World")
// console.log(CODMW2);
// CODMW2.showGameInfo()

// جلسه 116

// const btn = $.querySelector('.btn');
// const ArrowUp = $.querySelector(".ArrowUp")
// const ArrowDawn = $.querySelector(".ArrowDawn")
// const ArrowUp1 = $.querySelector(".ArrowUp1")
// const ArrowDawn1 = $.querySelector(".ArrowDawn1")
// const ArrowUp2 = $.querySelector(".ArrowUp2")
// const ArrowDawn2 = $.querySelector(".ArrowDawn2")

// btn.addEventListener('mouseover' , () => {
//   btn.style.padding = "0.4rem 3rem 1rem 2rem"
// ArrowUp1.style.display = "block"
// ArrowDawn1.style.display = "block"
// ArrowUp2.style.display = "block"
// ArrowDawn2.style.display = "block"

// setTimeout(() => {
//   ArrowDawn2.classList.add("yellowtn")
//   ArrowUp2.classList.add("yellowtn")
// },150)
// setTimeout(() => {
//   ArrowDawn1.classList.add("yellowtn")
//   ArrowUp1.classList.add("yellowtn")
// },200)
// setTimeout(() => {
//   ArrowDawn.classList.add("yellowtn")
//   ArrowUp.classList.add("yellowtn")
// },250)
// })
// btn.addEventListener('mouseleave' , () => {
//   btn.style.padding = "0.4rem 0rem 1rem 2rem"
//   ArrowUp1.style.display = "none"
//   ArrowDawn1.style.display = "none"
//   ArrowUp2.style.display = "none"
//   ArrowDawn2.style.display = "none"

//   ArrowUp1.classList.remove("yellowtn")
//   ArrowDawn1.classList.remove("yellowtn")
//   ArrowUp2.classList.remove("yellowtn")
//   ArrowDawn2.classList.remove("yellowtn")
//   ArrowUp.classList.remove("yellowtn")
//   ArrowDawn.classList.remove("yellowtn")
// })

// btn,addEventListener('click' , () => {
//   ArrowUp1.classList.remove("yellowtn")
//   ArrowDawn1.classList.remove("yellowtn")
// })

// جلسه 101

console.log("object");

// جلسه 100

// window.addEventListener("load" , () => {
//   // fetch('https://jsonplaceholder.typicode.com/posts/')
//   // .then(res => res.json())
//   // .then(data => data.forEach(post => console.log(post)))

// let url = 'https://jsonplaceholder.typicode.com/posts/'

// let postID = +prompt("Enter Your PostID That You Want: ")

// fetch(`${url}${postID}`)
//       .then(res => res.json())
//       .then(mainPost => console.log(mainPost))
// })

// // جلسه 96 97 98 99

// const fisrtNameIpt = $.getElementById("fisrtNameIpt")
// const lastNameIpt = $.getElementById("lastNameIpt")
// const ageIpt = $.getElementById("ageIpt")
// const passwordIpt = $.getElementById("passwordIpt")
// const form = $.querySelector("form")

// form.addEventListener("submit" , e => {
//   e.preventDefault()

//   let userObj = {
//     firstName: fisrtNameIpt.value.trim(),
//     lastName: lastNameIpt.value.trim(),
//     userAge: +ageIpt.value,
//     password: passwordIpt.value.trim(),
//   }

//   // fetch("https://console.firebase.google.com/project/mohammadiko-1f2a8/database/mohammadiko-1f2a8-default-rtdb/data/~sf/users.json" , {
//   // fetch("https://mohammadiko-1f2a8-default-rtdb.firebaseio.com/" , {
//   // fetch("https://leachmob-9dddc-default-rtdb.firebaseio.com/users.json" , {
//   fetch("https://leachmob-4f4fb-default-rtdb.firebaseio.com/users.json" , {
//     method: "POST",
//     headers: {
//       "Content-type": "application/json"
//     },
//     body: JSON.stringify(userObj)
//   }).then(res => {
//     console.log(` Your Status Code: ${res.status} (if Your Status 200 To 300 Send Data Is OK else If Uppper 300 there is a problem is sending to the database)`);
//     clearIpt()
//   })

// })
// //  .catch(err => console.log(err))

// function clearIpt (){
//   fisrtNameIpt.value = ""
// lastNameIpt.value = ""
// ageIpt.value = ""
// passwordIpt.value = ""
// }
// ageIpt.addEventListener("input", () => { console.log("object")
//  if (ageIpt.value < 1 || ageIpt.value > 99){ ageIpt.value = "" }})

// جلسه 94

// const fisrtname = $.querySelector('.fisrtname').value
// const lastname = $.querySelector('.lastname').value
// const password = $.querySelector('.password').value
// const deleteModel = $.querySelector('#delete-model');
// let userID = null
// window.addEventListener("load" , () => {
//   fetch("http://localhost:3000/api/users")
//   .then(res => res.json())
//   .then(data => {
//     data.forEach(item => {
//       wrapper.insertAdjacentHTML("beforeend", `
//       <div id="wrapper">
//       <div class="user">
//           <div class="user-profile-wrap">
//               <img src="content/img/noimg.png" alt="userProfile" class="userProfile">
//               <div class="user-profile-description">
//                   <h1 class="user-profile-name">${item.fisrtname} - ${item.lastname}</h1> <span class="user-age">${item.age}</span>
//                   <h3 class="user-explanations">im ${item.userNameid} and password is ${item.password} </h3>
//               </div>
//           </div>
//           <div class="btn-groups-column">
//               <button class="delete-user-btn" onclick="openDeleteModel(${user._id})">delete</button>
//               <button class="delete-user-btn" onclick="openEditModal("${user._id})">edit</button>
//           </div>
//       </div>
//   </div>
//       `)
//     });
//   })
// })

// function openDeleteModel (id){
//   userID = id
//   deleteModel.classList.add("visible")
// }

// function closeModal (){
//   deleteModel.classList.remove("visible")
// }

// function updateUser(){
//   let userData = {
//     fisrtname,
//    lastname,
//     password,
//   }

//   fetch(`http://localhost:3000/api/users/${userID}` , {
//     method: 'PUT',
//     headers: {
//       "content-type": "application/json"
//     },
//     body: JSON.stringify(userData)
//   })
//   .then(res => console.log(res))
// }

// function deleteUser (){

//   fetch(`http://localhost:3000/api/users/${userID}` , {
//     method: 'DELETE'
//   })
//   then(res => res.json())
//   then(data => console.log(data))

//   getAllUsers()
//   closeModal()
// }

// جلسه 93

// const deleteModel = $.querySelector('#delete-model');
// let userID = null
// window.addEventListener("load" , () => {
//   fetch("http://localhost:3000/api/users")
//   .then(res => res.json())
//   .then(data => {
//     data.forEach(item => {
//       wrapper.insertAdjacentHTML("beforeend", `
//       <div id="wrapper">
//       <div class="user">
//           <div class="user-profile-wrap">
//               <img src="content/img/noimg.png" alt="userProfile" class="userProfile">
//               <div class="user-profile-description">
//                   <h1 class="user-profile-name">${item.fisrtname} - ${item.lastname}</h1> <span class="user-age">${item.age}</span>
//                   <h3 class="user-explanations">im ${item.userNameid} and password is ${item.password} </h3>
//               </div>
//           </div>
//           <div class="btn-groups-column">
//               <button class="delete-user-btn" onclick="openDeleteModel(${user._id})">delete</button>
//               <button class="delete-user-btn">edit</button>
//           </div>
//       </div>
//   </div>
//       `)
//     });
//   })
// })

// function openDeleteModel (){
//   userID = id
//   deleteModel.classList.add("visible")
// }

// function closeModal (){
//   deleteModel.classList.remove("visible")

// }

// function updateUser(){
//   let userData = {
//     fisrtname: fisrtname.value,
//    lastname:lastname.value,
//     password: password.value,
//   }

//   fetch(`http://localhost:3000/api/users/${userID}` , {
//     method: 'PUT',
//     headers: {
//       "content-type": "application/json"
//     },
//     body: JSON.stringify(userData)
//   })
//   .then(res => console.log(res))
// }

// function deleteUser (){

//   fetch(`http://localhost:3000/api/users/${userID}` , {
//     method: 'DELETE'
//   })
//   then(res => res.json())
//   then(data => console.log(data))

//   getAllUsers()
//   closeModal()
// }

// جلسه 92

// const deleteModel = $.querySelector('#delete-model');
// let userID = null
// window.addEventListener("load" , () => {
//   fetch("http://localhost:3000/api/users")
//   .then(res => res.json())
//   .then(data => {
//     data.forEach(item => {
//       wrapper.insertAdjacentHTML("beforeend", `
//       <div id="wrapper">
//       <div class="user">
//           <div class="user-profile-wrap">
//               <img src="content/img/noimg.png" alt="userProfile" class="userProfile">
//               <div class="user-profile-description">
//                   <h1 class="user-profile-name">${item.fisrtname} - ${item.lastname}</h1> <span class="user-age">${item.age}</span>
//                   <h3 class="user-explanations">im ${item.userNameid} and password is ${item.password} </h3>
//               </div>
//           </div>
//           <div class="btn-groups-column">
//               <button class="delete-user-btn" onclick="openDeleteModel(${user._id})">delete</button>
//               <button class="delete-user-btn">edit</button>
//           </div>
//       </div>
//   </div>
//       `)
//     });
//   })
// })

// function openDeleteModel (){
//   userID = id
//   deleteModel.classList.add("visible")
// }

// function closeModal (){
//   deleteModel.classList.remove("visible")

// }
// function deleteUser (){

//   fetch(`http://localhost:3000/api/users/${userID}` , {
//     method: 'DELETE'
//   })
//   then(res => res.json)
//   then(data => console.log(data))
//   closeModal()
// }

// جلسه 91

// window.addEventListener("load" , () => {
//   fetch("http://localhost:3000/api/users")
//   .then(res => res.json())
//   .then(data => {
//     data.forEach(item => {
//       wrapper.insertAdjacentHTML("beforeend", `
//       <div id="wrapper">
//       <div class="user">
//           <div class="user-profile-wrap">
//               <img src="content/img/noimg.png" alt="userProfile" class="userProfile">
//               <div class="user-profile-description">
//                   <h1 class="user-profile-name">${item.fisrtname} - ${item.lastname}</h1> <span class="user-age">${item.age}</span>
//                   <h3 class="user-explanations">im ${item.userid} and password is ${item.password} </h3>
//               </div>
//           </div>
//           <div class="btn-groups-column">
//               <button class="delete-user-btn">delete</button>
//               <button class="delete-user-btn">edit</button>
//           </div>
//       </div>
//   </div>
//       `)
//     });
//   })
// })

// جلسه 90

// submitIpt.addEventListener('submit', e => {

// e.preventDefault();

// let userData = {
// fisrtName: fisrtNameIpt.value,
// lastName: lastNameIpt.value,
// password: passwordIpt.value,
// }

// fetch('localhost:3000/api/users' , {
//   method: 'POST',
//   headers: {
//     "Content-type": "application/json"
//   },
//   body: JSON.stringify(userData)
// }).then(res => console.log(res)).catch((err) => {

// });

// })

// جلسه 89

// let mainContiner = $.querySelector('.users')
// btn.addEventListener("click" ,function(e){
//   fetch('https://randomuser.me/api/')
//       .then(res => {
//         if (res.status === 200){
//           return res.json()
//         }
//         return new Error("ERROR :/")
//       }).then(data => {
//         console.log(data.results[0])
//         mainContiner.style.display = "flex"
//       gandersn.insertAdjacentHTML("beforeend" ,   `<li>${data.results[0].gender}</li>`)
//       namesn.insertAdjacentHTML("beforeend" ,     `<li>${data.results[0].name.first} - ${data.results[0].name.last}</li>`)
//       locationsn.insertAdjacentHTML("beforeend" , `<li>${data.results[0].location.country} - ${data.results[0].location.city}</li>`)
//       emailsn.insertAdjacentHTML("beforeend" ,    `<li>${data.results[0].email}</li>`)
//       phonesn.insertAdjacentHTML("beforeend" ,    `<li>${data.results[0].phone}</li>`)
//       })
//        .catch(err => console.log(err))
// })

// جلسه 88

// let user = [
//   {
//    ID: 1,
//    UserName: "Mohammad",
//    Password: 15200063556
//   },
//   {
//    ID: 2,
//    UserName: "Reza",
//    Password: 9562585
//   },
//   {
//    ID: 3,
//    UserName: "Amir",
//    Password: 7458201,
//    IsLogin: false
//   }
//  ]

// let jsonData = `[{"ID":1,"UserName":"Mohammad","Password":15200063556},{"ID":2,"UserName":"Reza","Password":9562585},{"ID":3,"UserName":"Amir","Password":7458201,"IsLogin":false}]`

//  console.log(JSON.parse(jsonData))

// جلسه 87

// const http = require('http')

// let course = [
//   {id: 1, title: "Js", price: "Free"},
//   {id: 2, title: "Node Js", price: 150_000},
//   {id: 3, title: "React", price: 2_000_000},
// ]

// http.createServer((req, res) => {

//   if (req.url === '/') {
//     res.write("Leach Mob is The Best (Index Page)")
//     res.end()
//   } else if (req.url === "/api/users"){
//     //res.write("List Of Laech Mob Users ;))")
//     res.write(JSON.stringify(users))
//     res.end()
//   } else if (req.url === "/api/course"){
//     //res.write("List Of Leach Mob Course :)")
//     res.write(JSON.stringify(course))
//     res.end()
//   }
// }).listen(3000)

// console.log("Server Run on Port (3000)")

// حلسه 86

// http Method:

// const C_Create = method => "POST"
// const R_Read   = method => "GET" // defult methods
// const U_Update = method => "PUT"
// const D_Delete = method => "DELETE"

// For Example:

// https://www.sabzlearn.ir/api/v1/corses , method: "GET"
// https://www.sabzlearn.ir/api/v1/corses , method: "POST"

// https://www.sabzlearn.ir/api/v1/corses/:id , method: "DELETE"
// https://www.sabzlearn.ir/api/v1/corses/:id , method: "PUT"

// جلسه 82

// const loadExternalFile = cdn => {
//   return new Promise((resolve,reject) => {
//     let linkTag = $.createElement('link')

//     linkTag.rel = 'stylesheet'
//     linkTag.href = cdn

//     linkTag.onload = () => resolve("File Loaded SuccessFully :))")
//     linkTag.onerror = () => reject(new Error("Ops... File not Loaded :/"))

//     $.head.append(linkTag)
//   })
// }
// loadExternalFile('./CSS/JSPRO.css')
//           .then(success => {
//             console.log(success)
//             film82.insertAdjacentHTML("afterbegin", `<h1>this is link style with <span>promise</span> and ${success}</h1>`)
//           })
//           .catch(err => {
//             console.log(err)
//             film82.insertAdjacentHTML("afterbegin", `<h1>this link is no defind || ${err}</h1>`)
//           })

// جلسه 81

// let fatchData = () => {
//   return new Promise((resolve, reject) => {
//     setTimeout(() => {
//       console.log("Farching Data Complete")
//       resolve({id: 1, massage: "Fetching Data Complete"})
//     }, 2000);
//   })
// }
// let parseData = data => {
//   return new Promise((resolve, reject) => {
//     setTimeout(() => {
//         let parsedOutpus = `Parsed the data for id: ${data.id} and with ${data.massage}`
//         resolve({parsed: parsedOutpus})
//     }, 2000);
//   })
// }
// let showData = response => {
//   return new Promise((resolve, reject) => {
//     setTimeout(() => {
//       console.log("showData" ,response.parsed)
//       resolve(response)
//     }, 2000);
//   })
// }

// fatchData()
//       .then(parseData)
//       .then(showData)

// جلسه 80

// let wordPromise = new Promise((resolve, reject) => {
//   let txt = "Leach Mob";

//   if (txt) {
//     resolve(txt)
//   } else {
//     reject(new Error("Text is empty!!"))
//   }
// })
// wordPromise
//     .then(respons => {
//           console.log(respons)
//           return respons.split("")
//     }).then(respons2 => {
//           console.log(respons2)
//           return respons2.reverse()
//     }).then(respons3 => {
//           console.log(respons3)
//           return respons3.join("")
//     }).catch(err => console.log(err))

// جلسه 79

// let myPromise = new Promise((resolve, reject) => {
//   let loginFlag = true

//   setTimeout(() => {

//     if (loginFlag) {
//           resolve("ََشما وارد حساب کاربری خود شوید")
//     } else {
//           reject(new Error ,"You are not Logged In")
//     }
//   }, 2500);
// })

// // myPromise
// //     .then(success => {
// //       console.log(success)
// //       console.log("پرامیس اجام شد")
// //     })
// //     .catch(err => {
// //       console.log("Error",err)
// //       console.log("پرامیس اجام شد")
// //     })

// myPromise.then(success => console.log(success)).catch(err => console.log(err)).finally(() => console.log("پرامیس اجام شد"))

//جلسه 78

// let myPromise = new Promise((reject , resolve) => {
//   // reject(new Error("Error"))
//   // resolve("success")
//   resolve("success")
//   reject(new Error("Error"))
// })

// myPromise.then(success => console.log(success)).catch(err => console.log("Error" , err))

// جلسه 77

// let myPromise = new Promise((resolve, reject) => {

//   const loginFlag = true

//   console.log("Checking Login please wait...")
//   setTimeout(() => {
//     if (loginFlag) {
//       resolve("You are already logged in")
//     } else {
//       reject(new Error("You are not logged in"))
//     }
//   }, 2000);
// })
// myPromise
//     .then((success) => console.log(success)).catch((err) => console.log(err))

// جلسه 76

// let books = [
//   {id: 1, name: "48ghanon"                   , price: 95_000},
//   {id: 2, name: "takhtaehkhabeto moratabcon" , price: 40_000},
//   {id: 3, name: "gym 5 sobhi ha"             , price: 80_000},
// ]

// function addBooks(name, price) {
// let newBook = {
//   id: books.length + 1,
//   name,
//   price,
// }

// return new Promise((resolve, reject) => {
//     setTimeout(function(){
//       if (books.push(newBook)){
//         resolve()
//       } else {
//         reject()
//       }
//     }, 4000)
//   })
// }

// function logBooks(){
//   console.log(books)
// }

// addBooks("asar morakab" , 50_000).then() // console.log(addBooks()) //addBooks("Golestan" , 90_000 , logBooks)

// // Promise = "قول دادن" , Es6(Resolved, Rejected)
// let myPromise = new Promise((resolve, reject) => {
//   const LoginFlag = false

//   setTimeout(() => {
//     console.log("Login Chacking")

//     if (loginFlag){
//       resolve()
//     } else {
//       reject()
//     }
//   }, 4000);
// })

// function success(){
//   console.log("Success :))")
// }
// function error(){
//   console.log("Error! :((")
// }

// // myPromise.then(success , error)
//  myPromise
//       .then(() => console.log("Success :))"))
//       .catch(() => console.log("Error! :(("))

// جلسه 75

// let books = [
//   {id: 1, name: "48ghanon"                   , price: 95_000},
//   {id: 2, name: "takhtaehkhabeto moratabcon" , price: 40_000},
//   {id: 3, name: "gym 5 sobhi ha"             , price: 80_000},
// ]

// function addBooks(name, price) {
// let newBook = {
//   id: books.length + 1,
//   name,
//   price,
// }

// setTimeout(function(){
//   books.push(newBook)
// }, 2500);
// }
// function logBooks(){
//   console.log(books)
// }

// addBooks("nametavani ba man aseb bazani" , 50_000 , logBooks())
// logBooks()
// Promise Es6 //

// جلسه 74

// let numOne = 20
// let numTwo = 10

// let loginFlag = false
// loginFlag = true

// let user1 = {
//  id: 1,
//  name: "Mohammad",
//  age: 18
// }

// user1 = {id: 2}

// let user2 = user1

// user2.name = "Reza"

// user2.age = 16

// console.log(user1)
// console.log(user2)

// let names1 = ["Mohammad" , "Reza" , "Amir" , "Ali"]
// let filteredNames = names1.filter(name => name.length > 3)

// names1.pop()

// console.log(names1)
// console.log(filteredNames)

// let names2 = ["Mohammad" , "Reza" , "Amir" , "Ali"]

// names2.reverse().forEach(name => console.log(name));
// [...names2].forEach(name => console.log(name))

// console.log(names2);

// [names2].forEach(name => console.log(name))

// جلسه 73

// let num1 = 2
// let num2 = 3

// console.log(num1 + num2);

// console.log("The Nigga love and Hate");

// let numbers = [1, 2, 3, 4, 5];//['Mohammad' , 'Reza' , "Amir" , "Ali"].map(name => console.log(name)) انگار اینجا ما این ارایه خط پایین رو کنکت کردیم

// ['Mohammad' , 'Reza' , "Amir" , "Ali"].map(name => console.log(name))

// console.log([1,2,3,4,5,6,7,8,9]['Mohammad', 'Reza', "Amir", "Ali"]);

// const nums = [1,2,3,5,6,7]

// nums.forEach(num => console.log(num));

// (function () {
//   console.log("IIFE :))")
// })()
// console.warn();

// جلسه 72

// if (ipt.value > 20 && ipt.value <= -1 ){
//   ipt.value = 1
// }
// body.addEventListener('keydown' , event => {
// if (event.keyCode === 13){
//   let score = ipt.value
//   // let section72 = $.getElementById("section72")
//   score > 0 && score <= 5 ? section72.insertAdjacentHTML("beforeend", `<h3 class="redS">D</h3>`)
//   : score > 5 && score <= 10 ? section72.insertAdjacentHTML("beforeend", `<h3 class="redS">C</h3>`)
//   : score > 10 && score <= 15 ? section72.insertAdjacentHTML("beforeend", `<h3 class="yellS">B</h3>`)
//   : score > 15 && score < 20 ? section72.insertAdjacentHTML("beforeend", `<h3 class="greenS">A</h3>`)
//   : score > 19 && score < 21 ? section72.insertAdjacentHTML("beforeend", `<h3 class="greenS">A+</h3>`)
//   : "not valid"
// }
// if (event.keyCode === 27){
// $.querySelector("h3").remove()
// ipt.value = ""
// }
// })

// جلسه 71

// let id = 1
// let userName = `mohammad`
// let userAge = 18

// // let userObjTest = {
// //   id: id,
// //   userName: userName,
// //   userAge: userAge,
// // }
// let userObj = {
//   id,
//   userName,
//   userAge,
// }
// console.log(userObj);

// const userMaker = (id , userName , userAge) => {
//   let newUserObj = {
//     id,
//     userName,
//     userAge
//   }

//   return newUserObj
// }

// let userReza = userMaker(1 , "Reza" , 16)
// console.log(userReza);

// جلسه 70

// let userNameSymbol = Symbol.for("MohammadNiko")
// let userAgeSl = Symbol.for(18)

// let userObj = {
//   id: 1,
//   name: "MohammadNiko",
//   age: 18,
//   [userNameSymbol]: "IJNDSFV-1E26582JNMK",
//   [userAgeSl]: "QUVPZ-583PSQXSLKBT2312"
// }

// // for (let item in userObj){console.log(item)} // userNameSymbol is undefined
// console.log(userObj[userNameSymbol]); // value
// // console.log(userObj[userIDsymbol] === userIDsymbol); // false
// console.log(userObj[Symbol.for("MohammadNiko")] === userObj[userNameSymbol]); // true
// console.log(userObj[Symbol.for(18)]);

// جلسه 69

// let newSymbol1 = Symbol()
// let newSymbol2 = Symbol()
// let newSymbol3 = Symbol("Mohammad")
// let newSymbol4 = Symbol("Mohammad")

// console.log(newSymbol1 === newSymbol2); // false
// console.log(newSymbol3 === newSymbol4); // false
// console.log(typeof newSymbol1); // symbol

// let userIDsymbol = Symbol('User ID')

// let userObj = {
//   id: 1,
//   name: 'Mohammadniko',
//   age: 18,
//   [userIDsymbol]: "IJNDSFV-1E26582JNMK"
// }
// console.log(userObj[userIDsymbol]);
// console.log(userObj[userIDsymbol] === userIDsymbol); // false

// for (let item in userObj) {console.log(item)} // userIDsymbol is undefined
// console.log(i);

// جلسه 68

// let user = {
//   id: 1,
//   userName: "mohammad",
//   lastuserName: "Niko",
// age: 18
// }

// user = new Proxy(user , {
// get : function(target , proparty){
//   console.log(target);
//   console.log(proparty);

//   return proparty in target ? target[proparty] : null
// },
// set : function(target , proparty , value){
//  console.log("target:" , target);
//  console.log("target:" , proparty);
//  console.log("target:" ,  value);

//    if (proparty === "type" && ["admin", "user", "author" , "teacher"].includes(tlc(value))){
//     target[proparty] = value;
//   } else {
//     console.warn("is value is not Kharzade")
//   }
//   if (tlc(proparty) === "age" && value < 18){
//     value = 20
//   }
//   target[proparty] = value;
//   }
// })

// user.age = 18
// console.log(user);

// جلسه 67

// let user = {
//   id: 1,
//   firstName: 'MOhannad',
//   lastName: "niko",
//   age: 18,
// }

// // let newProxy = new Proxy(user, {
// user = new Proxy(user, {
//   get: function(target , property){
//     console.log("Target: " + target);
//     console.log("Property: " + property);

//     return property in target ? target[property] : null
//   }
// })
// console.log("==========================");
// console.log("Object user id: " + user.id);
// console.log("==========================");
// // console.log("Proxy user: " + user.id);
// console.log("Object user firstName: " + user.firstName);
// // console.log("Proxy user: " + user.firstName);
// console.log("==========================");
// console.log("Object user job: " + user.job);
// // console.log("Proxy user: " + user.job);
// console.log("==========================");

// جلسه 66

// let user = {
//   id: 1,
//   firstName: 'Mohammad',
//   lastName: 'Niko',
//   age: 18
// }
// // CRUD (Create Read Update Delete)
// user.job = "Developmer"
// let newProxy = new Proxy(user, {user})

// console.log("user: " , user.firstName);
// console.log("user: " , newProxy.firstName);
// if (!user.email){console.log("email , is not in user")}

// جلسه 65

// let mySet = new Set()

// mySet.add("Reza")

// console.log(`Set: ${mySet} && Size: ${mySet.size}`);

// let myWeakSet = new WeakSet()

// let fakeObj = { data: 'mohammad'}

// myWeakSet.add(fakeObj)

// console.log(`Weak Set: ${myWeakSet} && Size: ${myWeakSet.size}`);

// function fakeData() {
//   this.data = {
//     data: `fake data`
//   }
// }

// window.fakeData = new fakeData()

// let mySet2 = new WeakSet()

// mySet2.add(window.fakeData)

// delete window.fakeData
// console.log(window.fakeData);
// console.log(mySet);

// console.log("____________________");
// let user = {
//   id: 1,
//   firstName: "mohammad",
//   lastName: "NiKO",
//   age: 18
// }

// console.log(user);
// for (let userProp of user){console.log(userProp)}

// let userMap = new WeakMap();

// userMap.set({id: 1})
// userMap.set({firstName: "mohammad"})
// userMap.set({lastName: "NiKO"})
// userMap.set({age: 18})

// console.log(`userMap before Delete ${userMap} && Size: ${userMap.size}`);
// userMap.delete('age');
// console.log(`userMap after Delete ${userMap} && Size: ${userMap.size}`);
// console.log(userMap.get('firstName'));

// // userMap.clear()

// console.log('userMap after cleared' , userMap);
// console.log(userMap.has('lastName'));

// userMap.forEach((key,value) => console.log(`${key} : ${value}`))
// userMap.forEach((key,value) =>  {
//   console.log(`${key} : ${value}`);
// })

// let userMap2 = new WeakMap()

// userMap2.set('id' , 1)
// userMap2.set('firstName' , 'Mohammad')
// userMap2.set('lastName' , 'NiKO')
// userMap2.set('age' , 18)

// let userObj = Object.fromEntries(userMap2)

// console.log(userObj);
// console.log(userMap2);

// جلسه 64

// let user = {
//   id: 1,
//   firstName: "mohammad",
//   lastName: "NiKO",
//   age: 18
// }

// console.log(user);
// for (let userProp of user){console.log(userProp)}

// let userMap = new Map();

// userMap.set('id', 1)
// userMap.set('firstName', 'mohammad')
// userMap.set('lastName', 'niko')
// userMap.set('age', 18)

// console.log(`userMap before Delete ${userMap} && Size: ${userMap.size}`);
// userMap.delete('age');
// console.log(`userMap after Delete ${userMap} && Size: ${userMap.size}`);
// console.log(userMap.get('firstName'));

//// userMap.clear()

// console.log('userMap after cleared' , userMap);
// console.log(userMap.has('lastName'));

// userMap.forEach((key,value) => console.log(`${key} : ${value}`))

// let userMap2 = new Map()

// userMap2.set('id' , 1)
// userMap2.set('firstName' , 'Mohammad')
// userMap2.set('lastName' , 'NiKO')
// userMap2.set('age' , 18)

// let userObj = Object.fromEntries(userMap2)

// console.log(userObj);
// console.log(userMap2);

// جلسه 63

// let userName = "Mohammad NiKO"
// let setUserName = new Set(userName)

// console.log(setUserName);

// let itemOne   = {id: 1, name: "MohammadNiko"}
// let itemTwo   = {id: 2, name: "Amir"}
// let itemThree = {id: 3, name: "Reza"}

// let setItemData = new Set()

// setItemData.add(50)
// setItemData.add(itemOne)

// console.log(setItemData.has({id: 1, name: "MohammadNiko"}));
// console.log(setItemData.has(itemOne));

// جلسه 62

// let scores = [
//  22,
//  55,
//  84,
//  62,
//  97,
//  12,
//  60,
//  74,
//  33,
//  49,
// چهار تا مقدار تکراری گذاشتیم
//  62,
//  55,
//  74,
//  22,
// ]

// console.log(scores);

// let newSetArray = new Set()

// newSetArray.add(22)
// newSetArray.add(55)
// newSetArray.add(84)
// newSetArray.add(62)
// newSetArray.add(97)
// newSetArray.add(12)
// newSetArray.add(60)
// newSetArray.add(74)
// newSetArray.add(33)
// newSetArray.add(49)
// //چهار تا مقدار تکراری گذاشتیم
// newSetArray.add(62)
// newSetArray.add(55)
// newSetArray.add(74)
// newSetArray.add(22)

// let arrayNumber = [...newSetArray]

// for (let item of newSetArray){console.log(item)}

// console.log('Before Delete' ,newSetArray , ' && Size => ' , newSetArray.size);
// console.log(newSetArray.has(100));

// newSetArray.forEach(number => console.log(number))

// setTimeout(() => {
//   newSetArray.delete(33)
//   console.log('after Delete' ,newSetArray , ' && Size => ' , newSetArray.size);
// }, 2000);
// setTimeout(() => {
//   newSetArray.clear()
//   console.log('after clear' ,newSetArray , ' && Size => ' , newSetArray.size);
// }, 10000);

// // let setScores = new Set([22,55,84,62,97,12,60,74,33,49,62,55,74,22,])
// let setScores = new Set(scores)

// console.log('Scores Array:' , scores);
// console.log('Scores Set:' , setScores);

// جلسه 59

// let users = {
//   1: {name: "mohammad" , age: 18 , job: 'front developer'},
//   2: {name: "reza" , age: 16 , job: 'backend developer'},
//   3: {name: "amir" , age: 19 , job: 'hack developer'},
// }

// // for(let user of users) {
// //   console.log(user);
// // }
// let newArryEntries = Object.entries(users);
// for(let user of newArryEntries) {
//   console.log(user);
// }

// حلسه 58

// let user = {
//   id: 1,
//   username: 'mohammad',
//   age: 18,

//   address: {
//     country: "Russia",
//     city: 'moscow'
//   }
// }

// let userStreet = user.address.street
// let userStreeeet = user.address.street ? user.address.street : undefined
// راهمنا خط بالا اگر در یوزر ادرس استریت  پراپرتی یوزر وجود نداشت برای ما مقدار جلویی یا یوزر ادرس استریت رو برابر با اندیفایت قرار بده
// let userStreeet = user.address?.street

// console.log(userStreet);
// console.log(userStreeet);
// console.log(userStreeeet);

// جلسه 57

// let portNan = NaN
// let portNull = null
// let portfalse = false
// let portundefi = undefined
// let developingPortValue =     portNan || 1385
// let developingPortNull =     portNull || 1390
// let developingPortFalse =   portfalse || 1395
// let developingPortUndefi = portundefi || 1400

// console.log(developingPortValue);
// console.log(developingPortNull);
// console.log(developingPortFalse);
// console.log(developingPortUndefi);

// console.log(portundefi ?? 3000)
// console.log((portundefi || 2000) ?? 3000)

// جلسه 56

// Built-in cons Function
// let userName = 'Mohammadniko'
// let adminName = 'Mohammadniko'
// let adminNames = new String("Mohammadniko")

// console.log(userName === adminName);
// console.log(userName === adminNames);

// let userAge = 22
// let userConsAge = new Number(22)

// console.log(userAge === userConsAge);

// جلسه 55

// function Users(userID ,userName , userAge , userJob){
// this.id = userID;
// this.name = userName;
// this.age = userAge;
// this.job = userJob;

// this.getID =   () => { return this.id   }
// this.getName = () => { return this.name }
// this.getAge =  () => { return this.age  }
// this.getJob =  () => { return this.job  }

// this.setName = (newName) => { this.name = newName }
// this.setAge =  (newAge) =>  {  this.age  = newAge  }
// this.setJob =  (newJob) =>  {  this.job  = newJob  }
// }

// let userMohammad = new Users(1 , "Mohammad" , 18 , "Front End developer")
// let userReza =     new Users(2 , "Reza"     , 16 , "back End developer")
// console.log(userMohammad);
// userMohammad.setAge(15)
// console.log(userMohammad.getAge());
// console.log(userMohammad);
// let userAmir =     new Users(3 , "Amir"     , 19 , "javaScipt developer")

// جلسه 55

// let userMohammad = {
//  id: 1,
//  name: 'mohammad',
//  age: 18,
//  job: 'Front Developer',
//  city: 'moscow',
//  country: "Russia"
//  online: true
// }
// let userReza = {
//  id: 2,
//  name: 'reza',
//  age: 16,
//  job: 'Backend Developer',
//  city: 'iran',
//  country: "mashhad"
//  online: true
// }
// let userAmir = {
//  id: 1,
//  name: 'amir',
//  age: 18,
//  job: 'securty Developer',
//  city: 'barlin',
//  country: "germany"
//  online: false
// }// RDY

// function user(userID , userName , userAge , userJob , userCity , userCountry , userISOnline){
// this.id = userID
// this.name = userName
// this.age = userAge
// this.job = userJob
// this.city = userCity
// this.country = userCountry
// this.online = userISOnline
// }

// let userMohammad = new user(1 , "Mohammad" , 18 , "Front Developer"   , "Moscow"   , "Russia"  , true)
// let userReza =     new user(2 , "Reza"     , 16 , "Backend Developer" , "Mashhad"  , "Iran"    , true)
// let userAmir =     new user(3 , "Amir"     , 19 , "Securty Developer" , "Barlin"   , "Germany" , false)
// let userAli =      new user(4 , "Ali"      , 22 , "Android Developer" , "Tehran"   , "Iran"    , true)
// let userAmin =     new user(5 , "Amin"     , 20 , "Ai Developer"      , "New York" , "USA"     , false)

// console.log(userMohammad ,userReza ,userAmir ,userAli ,userAmin);

// جلسه 54

// let user = {
//   id: 1,
//   username: "mohammad",
//   age: 18,

//   walk: function () {
//     console.log(`${this.username} is walking in reining weather`);
//   },

// aboutUser: function () {
//   console.log(`${this.username} is ${this.age} years old`);
// },
// aboutUser: function() {
//  setTimeout(() =>{
//   console.log(`${this.username} is ${this.age} years old`);
//  }, 1500);
//   aboutUser: () => {
//    setTimeout(function(){
//     console.log(`${this.username} is ${this.age} years old`);
//    },bind(user), 1500);
//   },
// };

// let user2 = {
//  id: 2,
//  username: 'reza',
//  age: 16
// }

// user.walk.call(user)
// user.aboutUser.apply(user2)

// جلسه 53

// let user1 = {
//  id: 1,
//  name: 'mohammad',
//  age: 18,
//  city: "moscow"
// }
// let user2 = {
//  id: 2,
//  name: 'ali',
//  age: 22,
//  city: "mashhad"
// }

// function showUser(score , country){
//  console.log(`${this.name} is ${this.age} years old:) score: ${score} country: ${country}`);
// }
// console.log("__________________________call__________________________");
// showUser.call(user1 , 20 , 'russia')
// showUser.call(user2 , 18 , 'iran')
// console.log("_________________________aplly___________________________");
// showUser.apply(user1 , [20 , 'russia'])
// showUser.apply(user2 , [18 , 'iran'])
// console.log("__________________________bind__________________________");
// showUser.bind(user1 , 20 , 'russia')()
// let bigBangFunc = showUser.bind(user2 , 18 , 'iran')
// bigBangFunc()

// جلسه 52

// let emailRegex = /.+@.+.com/

// let text = prompt("Please enter your Gmail Email address")

// console.log(emailRegex.test(text));

// جلسه 50 51

// let regexCode = /NiKO/
// let regexCode = /N.KO/
// let regexCode = /N.+O/

// let text = 'i am MohammadNiKO ,my job is full stack'

// console.log(regexCode.test(text));

// جلسه46 47 48 49 45

// let db = null;
// let objectStore = null;
// import {
//   nameIpt,
//   gmailIpt,
//   passIpt,
//   passrepIpt,
//   submitBtn,
//   login,
//   signUp,
// } from "./getElmant.js";

// window.addEventListener("load", () => {
//   let DBOpenReq = indexedDB.open("Leach mob", 1);

//   DBOpenReq.addEventListener("error", (err) => console.warn("Error: ", err));
//   DBOpenReq.addEventListener("success", (event) => {
//     db = event.target.result;
//     console.log("Success: ", event.target.result);
//   });
//   DBOpenReq.addEventListener("upgradeneeded", (event) => {
//     db = event.target.result;

//     console.log("Old Vearsion: ", event.oldVersion);
//     console.log("Upgaraid", event);
//     console.log("New Vearsion: ", event.newVersion);

//     if (!db.objectStoreNames.contains("users")) {
//       objectStore = db.createObjectStore("users", {
//         keyPath: "userID",
//       });
//     }
//     if (db.objectStoreNames.contains("users")) {
//       db.deleteObjectStore("users");
//     }
//     console.log("Upgarade" , db.objectStoreNames);
//   });
// });

// submitBtn.addEventListener("submit", event => {
//  event.preventDefault();
//   // if (passrepIpt.value !== passIpt.value) {
//   //   console.log("object");
//   // }

//   let newUser = {
//     userID: Math.round(Math.random() * 500) + 1,
//     name: nameIpt.value,
//     password: passIpt.value,
//     email: gmailIpt.value,
//   }

//   let tx = db.transaction("users", "readwrite");

//   tx.addEventListener("error", err => console.warn("Error", err));
//   tx.addEventListener("success", event => {
// console.log(event)
//   })
//   let store = tx.objectStore("users");
//   let request = store.add(newUser);
//   iptEmpty();

//   request.addEventListener("error", err => console.warn("Error", err));
//   request.addEventListener("success", event => console.log(event));
// });

// const iptEmpty = () => {
//   nameIpt.value = "";
//   gmailIpt.value = "";
//   passIpt.value = "";
//   passrepIpt.value = "";
// };

// جلسه 44

// let users = [
//  {id:1 , name:"mohammad" ,family: "niko" , age: 18 , city: "Moscow" , country: "Russia"},
//  {id:2 , name:"reza" ,family: "zendadel" , age: 16 , city: "Mashhad" , country: "Iran"},
//  {id:3 , name:"amir" ,family: "parvizi" , age: 19 , city: "tehran" , country: "Iran"},
//  {id:4 , name:"ali" ,family: "tnt" , age: 22 , city: "new york" , country: "amarica"},
//  {id:5 , name:"erfan" ,family: "ma" , age: 17 , city: "bragan" , country: "tyland"},
// ]
// let userName = prompt("Enter your name: ")
// let userFamily = prompt("Enter your family: ")

// let user = users.find(users => users.name === userName.toLowerCase() && users.family === userFamily.toLowerCase())
// if (user === undefined){
// console.info("شما هنوز ثبت نام نکردید")
// } else {
//  console.log(user);
// }

// جلسه 43
// جلسه 42

// let userAge = +prompt("Enter Your Age" , 18)

// console.log("user Age: " , userAge);
// console.log("type user Age: " , typeof userAge);
// console.log("true + false: " , true + false)
// console.log("true - false: " , true - false)
// console.log("undefined === null: " , Boolean(undefined === null));
// console.log("12 === 12 string: " , 12 === "12");
// console.log("1 === null: " , Boolean(1 === null));

// جلسه 41

// import reza from './import/Functoins.js'
// import * as Functoins from './import/Functoins.js'

// console.log(Functoins);

// جلسه 40

// import  {isLogin, userRigister , userCount as userNum} from "/JavaST/import/Functoins.js";
// import {isLogin} from './import/Functoins.js'

// let newUserName = prompt("Enter your name");
// let newUserage = +prompt("Enter your age");
// let findID = +prompt("Enter a number id to search user");
// console.log(isLogin(findID));

// console.log("User Count : ", userNum + 1);
// console.log(userRigister(newUserName, newUserage));

// جلسه 39

// let userAge = 19

// userAge > 18 || console.log("Right");
// userAge < 18 || console.log("Wrong");

// let userType = ``

// userAge === 18 || console.info(`Cos Shar`)

// let userToken = userType || `user`

// console.log(userToken);
// True || True => true
// False || True => true
// True || False => true
// False || False => False

// جلسه 38

// let userAge = 19

// if (userAge > 18){
//   console.log("You Are Right: ");
// }

// userAge > 18 && console.log("Your Right");
// userAge < 18 && console.log("Your Wronf");

// And / Or
// True && True => True
// False && True => ّFalse
// True && ّFalse => ّFalse
// False && ّFalse => ّFalse

// جلسه 37

// let producktPrice = 7_000_000
// let postCost = 5_000

// console.log("ToTal Price: " , producktPrice + postCost);

// let produckt = [
//   {id: 1, name: "LapTop", price: 50_000_000},
// ]

// console.log(produckt);

// جلسه 36

// let userName = `mohammad`

// console.log(userName.padStart(10));
// console.log(userName.padStart(10 , "-")); // --mohammad
// console.log(userName.padEnd(10));
// console.log(userName.padEnd(10 , "-")); // mohammad--

// let size = `04`
// console.log(size.padStart(2 , "0"));

// let phoneNumber = `09151211325`
// let last4Number = phoneNumber.slice(-4)
// let finalPhoneNumber = last4Number.padStart(phoneNumber.length, `*`)

// console.info(finalPhoneNumber);

// جلسه 35

// let userObj = {
//   id: 1,
//   name: "reza",
//   age: 16
// }

// for (let item in userObj) {
//   console.log(`user ${item}: ${userObj[item]}`);
// }

// جلسه 34

// let numbers = [2 ,4 ,6 ,7 , 9]
// let userName = `L.E.A.C.H M.O.B.`

// let user = {
//   id: 1,
//   name: "mohammad",
//   age: 18
// }

// for(let item of numbers){
//   console.log(item);
// }
// for(let char of userName){
//   console.log(item);
// }
// for(let property of user){ // wrong is not iterable
//   console.log(property);
// }

///////

// function sum() {
// console.log(arguments);
// arguments.forEach( => {});

// allArgs = 0

// for (let nums of arguments){
//   console.log(nums);
// }
// for (let nums of arguments){
// allArgs += nums
// console.log(nums);
//   }

//   return allArgs
// }

// sum(2 ,4 ,6 ,7 ,9)

///////

// let liElams = $.getElementsByTagName("li")

// // liElams.forEach(element => {})
// for (let li of liElams){
//   console.log(li);
//   li.addEventListener("click" , e => e.target.remove())
// }

// جلسه 33

// let type = "fake"

// let text = "lorem ipsum is"
// let text = "lorem ipsum is " + type

// console.log(text); // lorem ipsum is fake

// let names = "mohammad and "
// + "reza"

// console.log(names);

// let tipe = "fake"

// let txt = `lorem ipsum is ${tipe} => my power ${Math.pow(2, 4)}`

// console.log(txt);

// let inputElam = $.querySelector("input")
// let continerList = $.querySelector("ul")

// body.addEventListener(`keyup` , event => {
//   let {keyCode , target: ipt} = event

//   if (keyCode === 13){
//     if (ipt.value.trim()){
//       continerList.insertAdjacentHTML(`beforeend` , `<li>${ipt.value.trim()}</li>`)
//       ipt.value = ``
//     }}
// })

// جلسه 32

// let user = [1,"mohamamad", 18]

// let [userID, userName, userAge , userCity = "moscow"] = user

// console.log(userID);
// console.log(userName);
// console.log(userAge);
// console.log(userCity);

// let user = {
//   id: 1,
//   name: "Mohammad",
//   age: 18,
// }

// let id = user.id
// let name = user.name
// let age = user.age

// let {age , name, id} = user
// let {age , name, id: userID} = user

// console.log(id);
// console.log(userID);
// console.log(name);
// console.log(age);

// let users = [
//   {id: 1, name: "reza", age: 16 , email: "reza@gmail.com"},
//   {id: 2, name: "mohammad", age: 18 , email: "mohammad@gmail.com"},
//   {id: 3, name: "ali", age: 21 , email: "ali@gmail.com"},
//   {id: 4, name: "saeed", age: 19 , email: "saeed@gmail.com"},
// ]

// const getUser = userID => {
// let mainUser = users.find(user => user.id == userID)

// return mainUser
// }

// let {name: userName, email: userEmail} = getUser(4)

// console.log("User Name: " + userName);
// console.log("User Name: " + userEmail);

// const userIDInput = $.querySelector("input")

// userIDInput.addEventListener("keypress", event => {
//   let {keyCode, target: input} = event

//   if (keyCode === 13){
//     if (input.value > 0 || input.value < 5){
//       let {name,email} = getUser(input.value)

//       console.log("User Name: " + name);
//       console.log("User email: " + email);
//       input.value = ""
//     }
//   }
// })

// جلسه 31

// let user = [1, "mohammad", 18];

// let userID = user[0]
// let userName = user[1]
// let userAge = user[2]

// let [userID, userName, userAge] = user;

// console.log("userID: ", userID);
// console.log("userName: ", userName);
// console.log("userAge: ", userAge);

// const shoeNum = () => [1, 2, 3, 4, 5, 6, 7, 8, 9];

// let [firstNum , secondNum , thirdNum] = shoeNum()
// let [firstNum , , secondNum , thirdNum] = shoeNum()
// let [firstNum, , , secondNum, thirdNum] = shoeNum();

// console.log("userID: ", userID);
// console.log("userName: ", userName);
// console.log("userAge: ", userAge);

// جلسه 30

// const sum = (a,b,c) => {
// const sum = (a,b,c, ...args) => {
// const sum = (a,...args) => { // Sintack Error
// const sum = (a, ...args) => {
// console.log("a: ", a);
// console.log("b: " , b);
// console.log("c: " , c);
// console.log("args: ", args);

// let sumAllargs = 0;
// let arrayArgs = Array.from(arguments)
// arrayArgs.forEach(item => sumAllargs += item )
//   args.forEach((item) => (sumAllargs += item));

//   return sumAllargs;
// };

// console.log(sum(2, 4, 6, 7, 8, 9));

// جلسه 29

// let sum = (a,b,c) =>
//  function sum (a,b,c) {
//  console.log("A: " , a);
//  console.log("B: " , b);
//  console.log("C: " , c);
// return a + b + c

//  let sumAllargs = 0

//  let arrayArgs = Array.from(arguments)

//  arrayArgs.forEach(item => sumAllargs += item)
// Array.from(arguments).forEach(item => sumAllargs += item)
//  return sumAllargs
// }
// console.log(sum(9,8,7,6,5,4,3,2,1,10,20,30,40,50,60,70,80,90));

// جلسه 28

// let nums = [2, 3, 4, 5]

// let sum = (a,b,c) => {
//  console.log("A: " , a);
//  console.log("B: " , b);
//  console.log("C: " , c);
//  return a + b + c
// }

// console.log(sum(2, 4 ,6));
// console.log(sum(...nums));
// console.log("spread syntax es6");

// let userObjact = {
//  id: 1,
//  name: "mohammad",
//  age: 18
// }

// let copyUserObjact = userObjact

// userObjact.age = 19

// console.log(copyUserObjact);

// let userObj = {
//  id: 2,
//  name: "Reza",
//  age: 16
// }

// let copyuserObj = {...userObj}

// userObj.age = 18

// console.log(copyuserObj);

// جلسه 27

// let numbers = [1,2,3,4,5,6,7,8,9]

// numbers.forEach(number => {console.info(number);});
// console.log("-----------");

// let copyNum = numbers

// copyNum.push(10)

// console.log("number: " , numbers);
// console.log("Copy number: " , copyNum);
// console.log("-----------");

// console.log(...numbers);
// console.log("-----------");

// let copyNumber = [...numbers]

// copyNumber.push(50)

// console.log("number: " , numbers);
// console.log("copyNumber: " , copyNumber);

// let num1 = [1, 2, 3, 4 ,5]
// let num2 = [6,7,8,9,10]

// let allNums = [...num1 , 5.5 , ...num2]

// console.log(allNums);

// جلسه 26

// let numbers = [1,2,3,4,5,6,7,8,9]
// numbers.forEach(number => console.log(number));

// let mapDates = numbers.map(number => number * 2)
// console.table(mapDates);

// btn.addEventListener("click" , event => console.log(event.target))

// جلسه 25

// function sum (num1 , num2){
//  let addNumber = num1 + num2
//  return addNumber
// }

// console.log(sum(2,5));
// console.log("-----------------------------");
// // Arrow Function

// const sumhandler = (num1 , num2) => {
//  let addNumber = num1 + num2
//  return addNumber
// }

// console.log(sumhandler(8 , 92));
// console.log("-----------------------------");

// const pow = (num1 , num2) => {
//  return num1 ** num2
// }

// console.log(pow(2 , 5));
// console.log("-----------------------------");

// const powerHandler = (num1 , num2) => num1 ** num2

// console.log(powerHandler(3 , 3));
// console.log("-----------------------------");

// const logger = val => console.log("value: " + val);

// logger("this is arrow function result")
// console.log("-----------------------------");

// const gererateUser = (id, name, age) => {
//  return {id: id, name: name, age: age}
// }

// console.log(1 , "mohammad" , 18);
// console.log("-----------------------------");

// const gereratorUser = (id, name, age) => ({id: id, name: name, age: age})

// console.log(2 , "reza" , 16);

// جلسه 24

// let num = 2
// console.log(num);

// function showValue (){
//  "use strict";

//  numberVal = 2
//  console.log(numberVal);
// }

// showValue()

// جلسه 23

// num = 2 // let num = 2 or var num = 2 or const num = 2
// number = 12 // let number = 2 or var number = 2 or const number = 2

// function showValue(a,a){
// Code
// }

// NaN = 12
// undefined = 150

// console.log(010 + 020); // Octal Error

// let eval = 30
// let userName = "mohammad"

// delete userName

// جلسه 22

// function addNewBook(callbackFunc){
//  // code callbackfunc()
// }

// // higher order function

// function hofExp(){
//  return function(){
//   console.log("I am inner function :)");
//  }}

// hofExp()()

// let hofinner = hofExp()
// hofinner()

// let numbers = [1,2,3,4,5,6,7,8,9,0]

// numbers.map(function () {})

// جلسه 21

// let num = 20;

// function showNumber(){

//  let num = 18

//  console.log("is function" , num);
// }

// showNumber()
// console.log("Out Of Function" , num);

// جلسه 20

// let input = $.querySelector("input")
// let todolist = $.querySelector("ul")

// function trim (val){
//  return val.trim()
// }

// function toLowerCase (val){
//  return val.toLowerCase()
// }

// function insertTodoLi(todoval){
//  return "<li> " + todoval + " </li>"
// }

// function addTodo (event){
//  if (event.charCode === 13){
//   todolist.insertAdjacentHTML("beforeend" , insertTodoLi(toLowerCase(trim(input.value))))
//   input.value = ""
//  }
// }

// input.addEventListener("keypress" , addTodo)

// جلسه 19

// let testNum = 100

// console.log(testNum);

// function powerHandler (num1 , num2) {
//  return num1 ** num2
// }

// console.log(powerHandler(2 , 3));
// console.log(powerHandler(2 , 3));
// console.log("_________________");

// function powHandler (num1 , num2) {
//  return Math.random() * (num1 * num2)
// }

// console.log(powHandler(2 , 3));
// console.log("_________________");

// function pow (num1 , num2) {
//  return new Date()
// }

// console.log(pow(2 , 3));
// console.log("_________________");

// function poweHandler (num1 , num2) {
//   testNum  = 500

//  return num1 ** num2
// }

// console.log(testNum);
// console.log(poweHandler(2 , 3));
// console.log("_________________");

// function powHand (num1 , num2) {
//   testNum  = 500

//  return ((num1 ** num2) + testNum)
// }

// console.log(testNum);
// console.log(powHand(2 , 3));
// console.log(testNum);
// console.log("_________________");

// جلسه 18

// let books = [
//  {id: 1 , name: "48qanon" , price: 100000},
//  {id: 2 , name: "ravanshanasi tarik" , price: 150000},
//  {id: 3 , name: "5clock " , price: 200000},
// ]

// function addBooks (name, price , callback){
//  let newbook = {
//   id: books.length + 1,
//   name: name,
//   price: price
//  }

//  setTimeout(function(){
//   books.push(newbook)
//   callback()
//  }, 2000);
// }

// function logBooks () {
//  console.log(books);
// }

// console.log(books);
// addBooks("Golestan", 2000000 , logBooks)

// جلسه 17

// function firstLog(){
//  console.log(1);
//  console.log(2);
//  console.log(3);
// }
// function middleLog(lastLog){
//  setTimeout(function(){
//   console.log(4);
//   lastLog()
//  }, 2500)
// }
// function lastLog(){
//  console.log(5);
//  console.log(6);
// }

// firstLog()
// middleLog(lastLog)

// جلسه 16

// let image1btn = $.querySelector("#image1btn")
// let image2btn = $.querySelector("#image2btn")

// image1btn.addEventListener('click', function(){
//  body.style.backgroundImage = "url(./Assets/JSPRO/sink.png)"
// })
// image2btn.addEventListener('click', function(){
//  body.style.backgroundImage = "url(./Assets/JSPRO/sink2.png)"
// })

// جلسه 15

// const btn = $.querySelector("button")

// function clickHandler(){
//  console.log("clicked");
//  // return undifned
// }

// btn.addEventListener("click", clickHandler)

// function logger(func){
// console.log(func);
// console.log("Logged (1)");
// func()
// }

// function logger2(){
//  console.log("Logged (2)");
// }

// logger(logger2)

// let num = [1,2,3,4,5,6,7,8,9]

// num.map(function(item){
//  console.log(item);
// })

// جلسه 13

// let i;
// const listItems = $.querySelectorAll("li")
// const inputElam = $.querySelector("input")
// const listItemsContiner = $.querySelector("ul")

// listItems.forEach(function(li){
//  li.addEventListener("click", function(event){
//   console.log(event.target);
//   event.target.remove()
//  })
// })

// listItemsContiner.addEventListener("click", function(event){
//  if (event.target.tagname = "li"){
//   event.target.remove()
//  }
// })

// inputElam.addEventListener("keypress" , function(event){
//  if (event.keyCode === 13){
//   let newli = $.createElement("li")
//   newli.innerHTML = event.target.value

//   listItemsContiner.append(newli)

//   inputElam.value = ""
//  }
// })

// جلسه 12

// let divElam = $.querySelectorAll("div")

// divElam.forEach(function(div , index){
//  div.addEventListener("click", function(event) {

//   event.stopPropagation();

//   console.log("div: " + (index + 1));
//   event.target.style.backgroundColor = "#00b3ff";
//  } , {capture: true})
// })

// جلسه 11

// let divElam = $.querySelectorAll("div")

// divElam.forEach(function(div , index){
//  div.addEventListener("click", function(event) {
//   console.log("Div :" + (index + 1));
//   event.target.style.backgroundColor = "#00b3ff";
//   div.style.backgroundColor = "#ffe600"
//  } , {capture: true})
// })

// جلسه 10

// let divElam = $.querySelectorAll("div")

// divElam.forEach(function(div , index){
//  div.addEventListener("click", function(event) {
//   console.log("Div :" + (index + 1));
//   event.target.style.backgroundColor = "#00b3ff";
//   div.style.backgroundColor = "#ffe600"
//  })
// })

// جلسه 9

// let btn = $.querySelector("button")

// btn.addEventListener("click",function(){
//    btn.innerHTML = "click shod"
//    console.log("object");
// } , {
// once: true,
// })

// جلسه 7 8

// let Suggestions = [
//  "Amazon",
//  "AK47",
//  "Barber Shop",
//  "Blogger",
//  "Bollywood",
//  "BitCoin Price",
//  "Call of Duty",
//  "Call of Duty WWII",
//  "Call of Duty Modern Warfare II",
//  "CodingLab",
//  "CodingNepal",
//  "Calculator",
//  "Cosinos",
//  "CODM",
//  "Cos",
//  "Con",
//  "DOM",
//  "Dseigner",
//  "Developer",
//  "ECMAScript",
//  "Fuck",
//  "Facebook",
//  "facebook Ice Cube Page",
//  "Freelancer",
//  "Golden",
//  "Green",
//  "GTA",
//  "GTA SA",
//  "Grand Theft Auto",
//  "Grand Theft Auto San Andereas",
//  "How To Learn HTML & CSS",
//  "How To Learn JAVAScript",
//  "How To Learn Freelancer",
//  "How To Learn web designer",
//  "How To start youtube Channel",
//  "How To start Gaming Channel",
//  "How To Jagh bazanim",
//  "House Price",
//  "Ice Cube - Best Rapear of the world",
//  "Joice",
//  "Keyboard",
//  "Kir",
//  "Lion",
//  "Learn JS",
//  "Login",
//  "Login form in html & css",
//  "MohammadNiko",
//  "Moscow",
//  "Nice Lavat",
//  "Obi",
//  "Oparaetor",
//  "Purn Hub",
//  "Portegal",
//  "Quick",
//  "Russia",
//  "RockstarGame",
//  "RezaZendadel",
//  "Rooster",
//  "Sun",
//  "Sunday",
//  "Toshi MargBar To mother vazir artabata iran",
//  "Toshi MargBar To kharzade",
//  "Time",
//  "Use Your Brin",
//  "Varebal in JavaScript",
//  "Vlogger",
//  "Vechiles",
//  "Web Dseigner",
//  "Web Developer",
//  "What does HTML stands for?",
//  "What does CSS stands for?",
//  "Whats ECMAScript",
//  "www.google.com",
//  "www.gtaall.com",
//  "www.pornhub.com",
//  "www.brazzres.com",
//  "www.telegram.com",
//  "www.youtube.com",
//  "www.freelancer.com",
//  "wolf",
//  "Xnxx.com",
//  "Yellow",
//  "Youtube",
//  "Youtuber",
//  "Youtube Channel",
//  "Zead",
//  "Zombie",
//  "911",
// ]

// let searchInput = $.querySelector(".searchBox")
// let ipt = $.querySelector("input")
// let autoComplateBox = $.querySelector(".autoComplate-box")
// let image = $.querySelector("img")

// ipt.addEventListener("keyup" , function(){
//  let iptValue = ipt.value
//  let iptVal = iptValue.toLowerCase()

//   if (iptVal){
//    let filteredWords = Suggestions.filter(function(Sugges){
//     return Sugges.toLowerCase().startsWith(iptVal)
//    })
//    listItemGenerator(filteredWords)
//   } else {
//    autoComplateBox.innerHTML = ""
//   }})

//   function listItemGenerator(wordsArray){
//    let listitem = wordsArray.map(function(word){
//     return "<li>" + word + "</li>"
//    })
//    console.log(listitem);
//    let customList;
//    if (!listitem.length){
// customList = "<li>" + ipt.value + "</li>"
//    } else {
// customList = listitem.join("")
//    }

//    autoComplateBox.innerHTML = customList
//    complateInputWith()
//   }

// function complateInputWith(){
//  let allListItems = autoComplateBox.querySelectorAll("li")
//  allListItems.forEach(function(item){
//    item.addEventListener("click", function(event){
//     ipt.value = event.target.innerHTML
//     autoComplateBox.innerHTML = ""
//    })
//  })
// }

// image.addEventListener("click", function(){
//  ipt.value = ""
//     searchInput.classList.remove("active")
// })
// body.addEventListener("keyup", function(event){
// if (event.keyCode === 27 || event.keyCode === 46 ||event.keyCode === 13){
//  ipt.value = ""
//     searchInput.classList.remove("active")
// }
// })

// جلسه 5

// const myName1 = $.getElementById("myName1")

// console.log(myName1);
// console.log(myName2);
// myName1.style.color = "#0f9"
// myName2.style.color = "#f0f"
